
wtf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003850  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b28  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004484  08004484  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004484  08004484  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004484  08004484  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800448c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  20000018  080044a4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00001e04  20000a1c  080044a4  00020a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9aa  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000201b  00000000  00000000  0002f9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc8  00000000  00000000  00031a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  000327d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000147eb  00000000  00000000  000334b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a297  00000000  00000000  00047c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000715f2  00000000  00000000  00051f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3524  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003920  00000000  00000000  000c35a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003944 	.word	0x08003944

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003944 	.word	0x08003944

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f945 	bl	80003fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f003 fa60 	bl	800363c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f95d 	bl	8000466 <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f000 f925 	bl	8000412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	200008e0 	.word	0x200008e0

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	200008e0 	.word	0x200008e0

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <HAL_Delay+0x40>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d8f7      	bhi.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004

08000264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f003 0307 	and.w	r3, r3, #7
 8000272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000280:	4013      	ands	r3, r2
 8000282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	60d3      	str	r3, [r2, #12]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <__NVIC_GetPriorityGrouping+0x18>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	f003 0307 	and.w	r3, r3, #7
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	db0b      	blt.n	80002f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f003 021f 	and.w	r2, r3, #31
 80002e0:	4906      	ldr	r1, [pc, #24]	; (80002fc <__NVIC_EnableIRQ+0x34>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	095b      	lsrs	r3, r3, #5
 80002e8:	2001      	movs	r0, #1
 80002ea:	fa00 f202 	lsl.w	r2, r0, r2
 80002ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	e000e100 	.word	0xe000e100

08000300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000310:	2b00      	cmp	r3, #0
 8000312:	db0a      	blt.n	800032a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	490c      	ldr	r1, [pc, #48]	; (800034c <__NVIC_SetPriority+0x4c>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000328:	e00a      	b.n	8000340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4908      	ldr	r1, [pc, #32]	; (8000350 <__NVIC_SetPriority+0x50>)
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	f003 030f 	and.w	r3, r3, #15
 8000336:	3b04      	subs	r3, #4
 8000338:	0112      	lsls	r2, r2, #4
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	440b      	add	r3, r1
 800033e:	761a      	strb	r2, [r3, #24]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000e100 	.word	0xe000e100
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000354:	b480      	push	{r7}
 8000356:	b089      	sub	sp, #36	; 0x24
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f003 0307 	and.w	r3, r3, #7
 8000366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000368:	69fb      	ldr	r3, [r7, #28]
 800036a:	f1c3 0307 	rsb	r3, r3, #7
 800036e:	2b04      	cmp	r3, #4
 8000370:	bf28      	it	cs
 8000372:	2304      	movcs	r3, #4
 8000374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3304      	adds	r3, #4
 800037a:	2b06      	cmp	r3, #6
 800037c:	d902      	bls.n	8000384 <NVIC_EncodePriority+0x30>
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3b03      	subs	r3, #3
 8000382:	e000      	b.n	8000386 <NVIC_EncodePriority+0x32>
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	fa02 f303 	lsl.w	r3, r2, r3
 8000392:	43da      	mvns	r2, r3
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	401a      	ands	r2, r3
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800039c:	f04f 31ff 	mov.w	r1, #4294967295
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	fa01 f303 	lsl.w	r3, r1, r3
 80003a6:	43d9      	mvns	r1, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ac:	4313      	orrs	r3, r2
         );
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3724      	adds	r7, #36	; 0x24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c8:	d301      	bcc.n	80003ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ca:	2301      	movs	r3, #1
 80003cc:	e00f      	b.n	80003ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <SysTick_Config+0x40>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d6:	210f      	movs	r1, #15
 80003d8:	f04f 30ff 	mov.w	r0, #4294967295
 80003dc:	f7ff ff90 	bl	8000300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <SysTick_Config+0x40>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e6:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <SysTick_Config+0x40>)
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ec:	2300      	movs	r3, #0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	e000e010 	.word	0xe000e010

080003fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f7ff ff2d 	bl	8000264 <__NVIC_SetPriorityGrouping>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af00      	add	r7, sp, #0
 8000418:	4603      	mov	r3, r0
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
 800041e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000424:	f7ff ff42 	bl	80002ac <__NVIC_GetPriorityGrouping>
 8000428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	68b9      	ldr	r1, [r7, #8]
 800042e:	6978      	ldr	r0, [r7, #20]
 8000430:	f7ff ff90 	bl	8000354 <NVIC_EncodePriority>
 8000434:	4602      	mov	r2, r0
 8000436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff5f 	bl	8000300 <__NVIC_SetPriority>
}
 8000442:	bf00      	nop
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	4603      	mov	r3, r0
 8000452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff35 	bl	80002c8 <__NVIC_EnableIRQ>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ffa2 	bl	80003b8 <SysTick_Config>
 8000474:	4603      	mov	r3, r0
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000480:	b480      	push	{r7}
 8000482:	b08b      	sub	sp, #44	; 0x2c
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000492:	e127      	b.n	80006e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000494:	2201      	movs	r2, #1
 8000496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	69fa      	ldr	r2, [r7, #28]
 80004a4:	4013      	ands	r3, r2
 80004a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004a8:	69ba      	ldr	r2, [r7, #24]
 80004aa:	69fb      	ldr	r3, [r7, #28]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	f040 8116 	bne.w	80006de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	2b12      	cmp	r3, #18
 80004b8:	d034      	beq.n	8000524 <HAL_GPIO_Init+0xa4>
 80004ba:	2b12      	cmp	r3, #18
 80004bc:	d80d      	bhi.n	80004da <HAL_GPIO_Init+0x5a>
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d02b      	beq.n	800051a <HAL_GPIO_Init+0x9a>
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d804      	bhi.n	80004d0 <HAL_GPIO_Init+0x50>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d031      	beq.n	800052e <HAL_GPIO_Init+0xae>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d01c      	beq.n	8000508 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004ce:	e048      	b.n	8000562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d043      	beq.n	800055c <HAL_GPIO_Init+0xdc>
 80004d4:	2b11      	cmp	r3, #17
 80004d6:	d01b      	beq.n	8000510 <HAL_GPIO_Init+0x90>
          break;
 80004d8:	e043      	b.n	8000562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004da:	4a89      	ldr	r2, [pc, #548]	; (8000700 <HAL_GPIO_Init+0x280>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d026      	beq.n	800052e <HAL_GPIO_Init+0xae>
 80004e0:	4a87      	ldr	r2, [pc, #540]	; (8000700 <HAL_GPIO_Init+0x280>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d806      	bhi.n	80004f4 <HAL_GPIO_Init+0x74>
 80004e6:	4a87      	ldr	r2, [pc, #540]	; (8000704 <HAL_GPIO_Init+0x284>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d020      	beq.n	800052e <HAL_GPIO_Init+0xae>
 80004ec:	4a86      	ldr	r2, [pc, #536]	; (8000708 <HAL_GPIO_Init+0x288>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d01d      	beq.n	800052e <HAL_GPIO_Init+0xae>
          break;
 80004f2:	e036      	b.n	8000562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004f4:	4a85      	ldr	r2, [pc, #532]	; (800070c <HAL_GPIO_Init+0x28c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d019      	beq.n	800052e <HAL_GPIO_Init+0xae>
 80004fa:	4a85      	ldr	r2, [pc, #532]	; (8000710 <HAL_GPIO_Init+0x290>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d016      	beq.n	800052e <HAL_GPIO_Init+0xae>
 8000500:	4a84      	ldr	r2, [pc, #528]	; (8000714 <HAL_GPIO_Init+0x294>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d013      	beq.n	800052e <HAL_GPIO_Init+0xae>
          break;
 8000506:	e02c      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	623b      	str	r3, [r7, #32]
          break;
 800050e:	e028      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	3304      	adds	r3, #4
 8000516:	623b      	str	r3, [r7, #32]
          break;
 8000518:	e023      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	3308      	adds	r3, #8
 8000520:	623b      	str	r3, [r7, #32]
          break;
 8000522:	e01e      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	330c      	adds	r3, #12
 800052a:	623b      	str	r3, [r7, #32]
          break;
 800052c:	e019      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d102      	bne.n	800053c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000536:	2304      	movs	r3, #4
 8000538:	623b      	str	r3, [r7, #32]
          break;
 800053a:	e012      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d105      	bne.n	8000550 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000544:	2308      	movs	r3, #8
 8000546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	611a      	str	r2, [r3, #16]
          break;
 800054e:	e008      	b.n	8000562 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000550:	2308      	movs	r3, #8
 8000552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	615a      	str	r2, [r3, #20]
          break;
 800055a:	e002      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
          break;
 8000560:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d801      	bhi.n	800056c <HAL_GPIO_Init+0xec>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	e001      	b.n	8000570 <HAL_GPIO_Init+0xf0>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3304      	adds	r3, #4
 8000570:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	2bff      	cmp	r3, #255	; 0xff
 8000576:	d802      	bhi.n	800057e <HAL_GPIO_Init+0xfe>
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	e002      	b.n	8000584 <HAL_GPIO_Init+0x104>
 800057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000580:	3b08      	subs	r3, #8
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	210f      	movs	r1, #15
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	fa01 f303 	lsl.w	r3, r1, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	401a      	ands	r2, r3
 8000596:	6a39      	ldr	r1, [r7, #32]
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	431a      	orrs	r2, r3
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 8096 	beq.w	80006de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b59      	ldr	r3, [pc, #356]	; (8000718 <HAL_GPIO_Init+0x298>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a58      	ldr	r2, [pc, #352]	; (8000718 <HAL_GPIO_Init+0x298>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b56      	ldr	r3, [pc, #344]	; (8000718 <HAL_GPIO_Init+0x298>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ca:	4a54      	ldr	r2, [pc, #336]	; (800071c <HAL_GPIO_Init+0x29c>)
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	089b      	lsrs	r3, r3, #2
 80005d0:	3302      	adds	r3, #2
 80005d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005da:	f003 0303 	and.w	r3, r3, #3
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	220f      	movs	r2, #15
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43db      	mvns	r3, r3
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	4013      	ands	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a4b      	ldr	r2, [pc, #300]	; (8000720 <HAL_GPIO_Init+0x2a0>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d013      	beq.n	800061e <HAL_GPIO_Init+0x19e>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a4a      	ldr	r2, [pc, #296]	; (8000724 <HAL_GPIO_Init+0x2a4>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d00d      	beq.n	800061a <HAL_GPIO_Init+0x19a>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a49      	ldr	r2, [pc, #292]	; (8000728 <HAL_GPIO_Init+0x2a8>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d007      	beq.n	8000616 <HAL_GPIO_Init+0x196>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a48      	ldr	r2, [pc, #288]	; (800072c <HAL_GPIO_Init+0x2ac>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d101      	bne.n	8000612 <HAL_GPIO_Init+0x192>
 800060e:	2303      	movs	r3, #3
 8000610:	e006      	b.n	8000620 <HAL_GPIO_Init+0x1a0>
 8000612:	2304      	movs	r3, #4
 8000614:	e004      	b.n	8000620 <HAL_GPIO_Init+0x1a0>
 8000616:	2302      	movs	r3, #2
 8000618:	e002      	b.n	8000620 <HAL_GPIO_Init+0x1a0>
 800061a:	2301      	movs	r3, #1
 800061c:	e000      	b.n	8000620 <HAL_GPIO_Init+0x1a0>
 800061e:	2300      	movs	r3, #0
 8000620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000622:	f002 0203 	and.w	r2, r2, #3
 8000626:	0092      	lsls	r2, r2, #2
 8000628:	4093      	lsls	r3, r2
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4313      	orrs	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000630:	493a      	ldr	r1, [pc, #232]	; (800071c <HAL_GPIO_Init+0x29c>)
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	3302      	adds	r3, #2
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4938      	ldr	r1, [pc, #224]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	4313      	orrs	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
 8000656:	e006      	b.n	8000666 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	43db      	mvns	r3, r3
 8000660:	4933      	ldr	r1, [pc, #204]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	492e      	ldr	r1, [pc, #184]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	4313      	orrs	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
 800067e:	e006      	b.n	800068e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	43db      	mvns	r3, r3
 8000688:	4929      	ldr	r1, [pc, #164]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 800068a:	4013      	ands	r3, r2
 800068c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000696:	2b00      	cmp	r3, #0
 8000698:	d006      	beq.n	80006a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	4924      	ldr	r1, [pc, #144]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
 80006a6:	e006      	b.n	80006b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	43db      	mvns	r3, r3
 80006b0:	491f      	ldr	r1, [pc, #124]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006c4:	68da      	ldr	r2, [r3, #12]
 80006c6:	491a      	ldr	r1, [pc, #104]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
 80006ce:	e006      	b.n	80006de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	43db      	mvns	r3, r3
 80006d8:	4915      	ldr	r1, [pc, #84]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006da:	4013      	ands	r3, r2
 80006dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	3301      	adds	r3, #1
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	fa22 f303 	lsr.w	r3, r2, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	f47f aed0 	bne.w	8000494 <HAL_GPIO_Init+0x14>
  }
}
 80006f4:	bf00      	nop
 80006f6:	372c      	adds	r7, #44	; 0x2c
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	10210000 	.word	0x10210000
 8000704:	10110000 	.word	0x10110000
 8000708:	10120000 	.word	0x10120000
 800070c:	10310000 	.word	0x10310000
 8000710:	10320000 	.word	0x10320000
 8000714:	10220000 	.word	0x10220000
 8000718:	40021000 	.word	0x40021000
 800071c:	40010000 	.word	0x40010000
 8000720:	40010800 	.word	0x40010800
 8000724:	40010c00 	.word	0x40010c00
 8000728:	40011000 	.word	0x40011000
 800072c:	40011400 	.word	0x40011400
 8000730:	40010400 	.word	0x40010400

08000734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	807b      	strh	r3, [r7, #2]
 8000740:	4613      	mov	r3, r2
 8000742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000744:	787b      	ldrb	r3, [r7, #1]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800074a:	887a      	ldrh	r2, [r7, #2]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000750:	e003      	b.n	800075a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	041a      	lsls	r2, r3, #16
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	611a      	str	r2, [r3, #16]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	4013      	ands	r3, r2
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f806 	bl	8000794 <HAL_GPIO_EXTI_Callback>
  }
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e10f      	b.n	80009da <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d106      	bne.n	80007d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f002 ff66 	bl	80036a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2224      	movs	r2, #36	; 0x24
 80007d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f022 0201 	bic.w	r2, r2, #1
 80007ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007ec:	f001 f906 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 80007f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a7b      	ldr	r2, [pc, #492]	; (80009e4 <HAL_I2C_Init+0x23c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d807      	bhi.n	800080c <HAL_I2C_Init+0x64>
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <HAL_I2C_Init+0x240>)
 8000800:	4293      	cmp	r3, r2
 8000802:	bf94      	ite	ls
 8000804:	2301      	movls	r3, #1
 8000806:	2300      	movhi	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	e006      	b.n	800081a <HAL_I2C_Init+0x72>
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4a77      	ldr	r2, [pc, #476]	; (80009ec <HAL_I2C_Init+0x244>)
 8000810:	4293      	cmp	r3, r2
 8000812:	bf94      	ite	ls
 8000814:	2301      	movls	r3, #1
 8000816:	2300      	movhi	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e0db      	b.n	80009da <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4a72      	ldr	r2, [pc, #456]	; (80009f0 <HAL_I2C_Init+0x248>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0c9b      	lsrs	r3, r3, #18
 800082c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	430a      	orrs	r2, r1
 8000840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4a64      	ldr	r2, [pc, #400]	; (80009e4 <HAL_I2C_Init+0x23c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d802      	bhi.n	800085c <HAL_I2C_Init+0xb4>
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	e009      	b.n	8000870 <HAL_I2C_Init+0xc8>
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000862:	fb02 f303 	mul.w	r3, r2, r3
 8000866:	4a63      	ldr	r2, [pc, #396]	; (80009f4 <HAL_I2C_Init+0x24c>)
 8000868:	fba2 2303 	umull	r2, r3, r2, r3
 800086c:	099b      	lsrs	r3, r3, #6
 800086e:	3301      	adds	r3, #1
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	430b      	orrs	r3, r1
 8000876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4956      	ldr	r1, [pc, #344]	; (80009e4 <HAL_I2C_Init+0x23c>)
 800088c:	428b      	cmp	r3, r1
 800088e:	d80d      	bhi.n	80008ac <HAL_I2C_Init+0x104>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	1e59      	subs	r1, r3, #1
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fbb1 f3f3 	udiv	r3, r1, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	bf38      	it	cc
 80008a8:	2304      	movcc	r3, #4
 80008aa:	e04f      	b.n	800094c <HAL_I2C_Init+0x1a4>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <HAL_I2C_Init+0x130>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1e58      	subs	r0, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6859      	ldr	r1, [r3, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	440b      	add	r3, r1
 80008c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80008c6:	3301      	adds	r3, #1
 80008c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	e012      	b.n	80008fe <HAL_I2C_Init+0x156>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	1e58      	subs	r0, r3, #1
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6859      	ldr	r1, [r3, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	0099      	lsls	r1, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80008ee:	3301      	adds	r3, #1
 80008f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf0c      	ite	eq
 80008f8:	2301      	moveq	r3, #1
 80008fa:	2300      	movne	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_I2C_Init+0x15e>
 8000902:	2301      	movs	r3, #1
 8000904:	e022      	b.n	800094c <HAL_I2C_Init+0x1a4>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d10e      	bne.n	800092c <HAL_I2C_Init+0x184>
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	1e58      	subs	r0, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6859      	ldr	r1, [r3, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	440b      	add	r3, r1
 800091c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000920:	3301      	adds	r3, #1
 8000922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	e00f      	b.n	800094c <HAL_I2C_Init+0x1a4>
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	1e58      	subs	r0, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6859      	ldr	r1, [r3, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	0099      	lsls	r1, r3, #2
 800093c:	440b      	add	r3, r1
 800093e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000942:	3301      	adds	r3, #1
 8000944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	6809      	ldr	r1, [r1, #0]
 8000950:	4313      	orrs	r3, r2
 8000952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69da      	ldr	r2, [r3, #28]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a1b      	ldr	r3, [r3, #32]
 8000966:	431a      	orrs	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800097a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	6911      	ldr	r1, [r2, #16]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68d2      	ldr	r2, [r2, #12]
 8000986:	4311      	orrs	r1, r2
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	430b      	orrs	r3, r1
 800098e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	431a      	orrs	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0201 	orr.w	r2, r2, #1
 80009ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2220      	movs	r2, #32
 80009c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	000186a0 	.word	0x000186a0
 80009e8:	001e847f 	.word	0x001e847f
 80009ec:	003d08ff 	.word	0x003d08ff
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	10624dd3 	.word	0x10624dd3

080009f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	4608      	mov	r0, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4603      	mov	r3, r0
 8000a08:	817b      	strh	r3, [r7, #10]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	813b      	strh	r3, [r7, #8]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000a12:	f7ff fbfb 	bl	800020c <HAL_GetTick>
 8000a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b20      	cmp	r3, #32
 8000a22:	f040 80d9 	bne.w	8000bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2319      	movs	r3, #25
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	496d      	ldr	r1, [pc, #436]	; (8000be4 <HAL_I2C_Mem_Write+0x1ec>)
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f000 fa87 	bl	8000f44 <I2C_WaitOnFlagUntilTimeout>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e0cc      	b.n	8000bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d101      	bne.n	8000a4e <HAL_I2C_Mem_Write+0x56>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e0c5      	b.n	8000bda <HAL_I2C_Mem_Write+0x1e2>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d007      	beq.n	8000a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0201 	orr.w	r2, r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2221      	movs	r2, #33	; 0x21
 8000a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2240      	movs	r2, #64	; 0x40
 8000a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6a3a      	ldr	r2, [r7, #32]
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_I2C_Mem_Write+0x1f0>)
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ab6:	88f8      	ldrh	r0, [r7, #6]
 8000ab8:	893a      	ldrh	r2, [r7, #8]
 8000aba:	8979      	ldrh	r1, [r7, #10]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f000 f9b2 	bl	8000e30 <I2C_RequestMemoryWrite>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d052      	beq.n	8000b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e081      	b.n	8000bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 fb08 	bl	80010f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00d      	beq.n	8000b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d107      	bne.n	8000afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e06b      	b.n	8000bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d11b      	bne.n	8000b78 <HAL_I2C_Mem_Write+0x180>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d017      	beq.n	8000b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b62:	3b01      	subs	r3, #1
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	3b01      	subs	r3, #1
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1aa      	bne.n	8000ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 faf4 	bl	8001172 <I2C_WaitOnBTFFlagUntilTimeout>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00d      	beq.n	8000bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d107      	bne.n	8000ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e016      	b.n	8000bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e000      	b.n	8000bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8000bd8:	2302      	movs	r3, #2
  }
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	00100002 	.word	0x00100002
 8000be8:	ffff0000 	.word	0xffff0000

08000bec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff fb06 	bl	800020c <HAL_GetTick>
 8000c00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b20      	cmp	r3, #32
 8000c10:	f040 8105 	bne.w	8000e1e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2319      	movs	r3, #25
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4982      	ldr	r1, [pc, #520]	; (8000e28 <HAL_I2C_IsDeviceReady+0x23c>)
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f000 f990 	bl	8000f44 <I2C_WaitOnFlagUntilTimeout>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	e0f8      	b.n	8000e20 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d101      	bne.n	8000c3c <HAL_I2C_IsDeviceReady+0x50>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e0f1      	b.n	8000e20 <HAL_I2C_IsDeviceReady+0x234>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d007      	beq.n	8000c62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f042 0201 	orr.w	r2, r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2224      	movs	r2, #36	; 0x24
 8000c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4a6a      	ldr	r2, [pc, #424]	; (8000e2c <HAL_I2C_IsDeviceReady+0x240>)
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f000 f94e 	bl	8000f44 <I2C_WaitOnFlagUntilTimeout>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0b6      	b.n	8000e20 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cb2:	897b      	ldrh	r3, [r7, #10]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000cc0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000cc2:	f7ff faa3 	bl	800020c <HAL_GetTick>
 8000cc6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	bf0c      	ite	eq
 8000cd6:	2301      	moveq	r3, #1
 8000cd8:	2300      	movne	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000cf6:	e025      	b.n	8000d44 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000cf8:	f7ff fa88 	bl	800020c <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d302      	bcc.n	8000d0e <HAL_I2C_IsDeviceReady+0x122>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d103      	bne.n	8000d16 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	22a0      	movs	r2, #160	; 0xa0
 8000d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2301      	moveq	r3, #1
 8000d3e:	2300      	movne	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2ba0      	cmp	r3, #160	; 0xa0
 8000d4e:	d005      	beq.n	8000d5c <HAL_I2C_IsDeviceReady+0x170>
 8000d50:	7dfb      	ldrb	r3, [r7, #23]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <HAL_I2C_IsDeviceReady+0x170>
 8000d56:	7dbb      	ldrb	r3, [r7, #22]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0cd      	beq.n	8000cf8 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d129      	bne.n	8000dc6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2319      	movs	r3, #25
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4921      	ldr	r1, [pc, #132]	; (8000e28 <HAL_I2C_IsDeviceReady+0x23c>)
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f8ce 	bl	8000f44 <I2C_WaitOnFlagUntilTimeout>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e036      	b.n	8000e20 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2220      	movs	r2, #32
 8000db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e02c      	b.n	8000e20 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000dde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2319      	movs	r3, #25
 8000de6:	2201      	movs	r2, #1
 8000de8:	490f      	ldr	r1, [pc, #60]	; (8000e28 <HAL_I2C_IsDeviceReady+0x23c>)
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 f8aa 	bl	8000f44 <I2C_WaitOnFlagUntilTimeout>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e012      	b.n	8000e20 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f4ff af3e 	bcc.w	8000c86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8000e1e:	2302      	movs	r3, #2
  }
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	00100002 	.word	0x00100002
 8000e2c:	ffff0000 	.word	0xffff0000

08000e30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4603      	mov	r3, r0
 8000e40:	817b      	strh	r3, [r7, #10]
 8000e42:	460b      	mov	r3, r1
 8000e44:	813b      	strh	r3, [r7, #8]
 8000e46:	4613      	mov	r3, r2
 8000e48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f000 f86c 	bl	8000f44 <I2C_WaitOnFlagUntilTimeout>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e05f      	b.n	8000f36 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000e76:	897b      	ldrh	r3, [r7, #10]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	6a3a      	ldr	r2, [r7, #32]
 8000e8a:	492d      	ldr	r1, [pc, #180]	; (8000f40 <I2C_RequestMemoryWrite+0x110>)
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f000 f8b0 	bl	8000ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e04c      	b.n	8000f36 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb4:	6a39      	ldr	r1, [r7, #32]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f91a 	bl	80010f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00d      	beq.n	8000ede <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d107      	bne.n	8000eda <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e02b      	b.n	8000f36 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000ee4:	893b      	ldrh	r3, [r7, #8]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	e021      	b.n	8000f34 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000ef0:	893b      	ldrh	r3, [r7, #8]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f00:	6a39      	ldr	r1, [r7, #32]
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 f8f4 	bl	80010f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00d      	beq.n	8000f2a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d107      	bne.n	8000f26 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e005      	b.n	8000f36 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f2a:	893b      	ldrh	r3, [r7, #8]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	00010002 	.word	0x00010002

08000f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f54:	e025      	b.n	8000fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d021      	beq.n	8000fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f5e:	f7ff f955 	bl	800020c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d302      	bcc.n	8000f74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d116      	bne.n	8000fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f043 0220 	orr.w	r2, r3, #32
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e023      	b.n	8000fea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10d      	bne.n	8000fc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	e00c      	b.n	8000fe2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bf0c      	ite	eq
 8000fda:	2301      	moveq	r3, #1
 8000fdc:	2300      	movne	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d0b6      	beq.n	8000f56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001000:	e051      	b.n	80010a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001010:	d123      	bne.n	800105a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001020:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800102a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2220      	movs	r2, #32
 8001036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f043 0204 	orr.w	r2, r3, #4
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e046      	b.n	80010e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d021      	beq.n	80010a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001062:	f7ff f8d3 	bl	800020c <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d302      	bcc.n	8001078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d116      	bne.n	80010a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2220      	movs	r2, #32
 8001082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f043 0220 	orr.w	r2, r3, #32
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e020      	b.n	80010e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10c      	bne.n	80010ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4013      	ands	r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	e00b      	b.n	80010e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	43da      	mvns	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	4013      	ands	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf14      	ite	ne
 80010dc:	2301      	movne	r3, #1
 80010de:	2300      	moveq	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d18d      	bne.n	8001002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80010fc:	e02d      	b.n	800115a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 f878 	bl	80011f4 <I2C_IsAcknowledgeFailed>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e02d      	b.n	800116a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d021      	beq.n	800115a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001116:	f7ff f879 	bl	800020c <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	429a      	cmp	r2, r3
 8001124:	d302      	bcc.n	800112c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d116      	bne.n	800115a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2220      	movs	r2, #32
 8001136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f043 0220 	orr.w	r2, r3, #32
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e007      	b.n	800116a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	2b80      	cmp	r3, #128	; 0x80
 8001166:	d1ca      	bne.n	80010fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800117e:	e02d      	b.n	80011dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 f837 	bl	80011f4 <I2C_IsAcknowledgeFailed>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e02d      	b.n	80011ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001196:	d021      	beq.n	80011dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001198:	f7ff f838 	bl	800020c <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d302      	bcc.n	80011ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d116      	bne.n	80011dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2220      	movs	r2, #32
 80011b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f043 0220 	orr.w	r2, r3, #32
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e007      	b.n	80011ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d1ca      	bne.n	8001180 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120a:	d11b      	bne.n	8001244 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001214:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2220      	movs	r2, #32
 8001220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f043 0204 	orr.w	r2, r3, #4
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e26c      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b04      	cmp	r3, #4
 800127a:	d00c      	beq.n	8001296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800127c:	4b8f      	ldr	r3, [pc, #572]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d112      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
 8001288:	4b8c      	ldr	r3, [pc, #560]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d10b      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	4b89      	ldr	r3, [pc, #548]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d06c      	beq.n	800137c <HAL_RCC_OscConfig+0x12c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d168      	bne.n	800137c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e246      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x76>
 80012b8:	4b80      	ldr	r3, [pc, #512]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a7f      	ldr	r2, [pc, #508]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e02e      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b7b      	ldr	r3, [pc, #492]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7a      	ldr	r2, [pc, #488]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b78      	ldr	r3, [pc, #480]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a77      	ldr	r2, [pc, #476]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0xbc>
 80012f2:	4b72      	ldr	r3, [pc, #456]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a71      	ldr	r2, [pc, #452]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 800130c:	4b6b      	ldr	r3, [pc, #428]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a6a      	ldr	r2, [pc, #424]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b68      	ldr	r3, [pc, #416]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a67      	ldr	r2, [pc, #412]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7fe ff6e 	bl	800020c <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7fe ff6a 	bl	800020c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1fa      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xe4>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7fe ff5a 	bl	800020c <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7fe ff56 	bl	800020c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1e6      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x10c>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138a:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001396:	4b49      	ldr	r3, [pc, #292]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
 80013a2:	4b46      	ldr	r3, [pc, #280]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1ba      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4939      	ldr	r1, [pc, #228]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7fe ff0f 	bl	800020c <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f2:	f7fe ff0b 	bl	800020c <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e19b      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4927      	ldr	r1, [pc, #156]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7fe feee 	bl	800020c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001434:	f7fe feea 	bl	800020c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e17a      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03a      	beq.n	80014d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_RCC_OscConfig+0x274>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7fe fece 	bl	800020c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001474:	f7fe feca 	bl	800020c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e15a      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f000 fac6 	bl	8001a24 <RCC_Delay>
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_RCC_OscConfig+0x274>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7fe feb4 	bl	800020c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a6:	e00f      	b.n	80014c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7fe feb0 	bl	800020c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d908      	bls.n	80014c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e140      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	42420000 	.word	0x42420000
 80014c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b9e      	ldr	r3, [pc, #632]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e9      	bne.n	80014a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a6 	beq.w	800162e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b97      	ldr	r3, [pc, #604]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b94      	ldr	r3, [pc, #592]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a93      	ldr	r2, [pc, #588]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b91      	ldr	r3, [pc, #580]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b8e      	ldr	r3, [pc, #568]	; (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a8a      	ldr	r2, [pc, #552]	; (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7fe fe71 	bl	800020c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7fe fe6d 	bl	800020c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0fd      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x312>
 8001554:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a7a      	ldr	r2, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e02d      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x334>
 800156a:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a75      	ldr	r2, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b73      	ldr	r3, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a72      	ldr	r2, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x356>
 800158c:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a6c      	ldr	r2, [pc, #432]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a69      	ldr	r2, [pc, #420]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a66      	ldr	r2, [pc, #408]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a63      	ldr	r2, [pc, #396]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7fe fe21 	bl	800020c <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7fe fe1d 	bl	800020c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0ab      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	4b57      	ldr	r3, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x37e>
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7fe fe0b 	bl	800020c <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7fe fe07 	bl	800020c <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e095      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b48      	ldr	r3, [pc, #288]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a47      	ldr	r2, [pc, #284]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8081 	beq.w	800173a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d061      	beq.n	8001708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d146      	bne.n	80016da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_RCC_OscConfig+0x4fc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7fe fddb 	bl	800020c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7fe fdd7 	bl	800020c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e067      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166c:	4b35      	ldr	r3, [pc, #212]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001680:	d108      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	492d      	ldr	r1, [pc, #180]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a19      	ldr	r1, [r3, #32]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	430b      	orrs	r3, r1
 80016a6:	4927      	ldr	r1, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_RCC_OscConfig+0x4fc>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7fe fdab 	bl	800020c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7fe fda7 	bl	800020c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e037      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x46a>
 80016d8:	e02f      	b.n	800173a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_RCC_OscConfig+0x4fc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7fe fd94 	bl	800020c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7fe fd90 	bl	800020c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e020      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x498>
 8001706:	e018      	b.n	800173a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e013      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	429a      	cmp	r2, r3
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	42420060 	.word	0x42420060

08001750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0d0      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d910      	bls.n	8001794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b67      	ldr	r3, [pc, #412]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 0207 	bic.w	r2, r3, #7
 800177a:	4965      	ldr	r1, [pc, #404]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0b8      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ac:	4b59      	ldr	r3, [pc, #356]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a58      	ldr	r2, [pc, #352]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	494d      	ldr	r1, [pc, #308]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d040      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d115      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e07f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e073      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06b      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4936      	ldr	r1, [pc, #216]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7fe fce4 	bl	800020c <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7fe fce0 	bl	800020c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e053      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d210      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0207 	bic.w	r2, r3, #7
 8001886:	4922      	ldr	r1, [pc, #136]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e032      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4916      	ldr	r1, [pc, #88]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	490e      	ldr	r1, [pc, #56]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018de:	f000 f821 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018e2:	4601      	mov	r1, r0
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	fa21 f303 	lsr.w	r3, r1, r3
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1cc>)
 80018f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1d0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fc42 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40022000 	.word	0x40022000
 8001914:	40021000 	.word	0x40021000
 8001918:	0800446c 	.word	0x0800446c
 800191c:	20000014 	.word	0x20000014
 8001920:	20000000 	.word	0x20000000

08001924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	b490      	push	{r4, r7}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800192c:	1d3c      	adds	r4, r7, #4
 800192e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x40>
 800195e:	2b08      	cmp	r3, #8
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x46>
 8001962:	e02d      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001966:	623b      	str	r3, [r7, #32]
      break;
 8001968:	e02d      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	0c9b      	lsrs	r3, r3, #18
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001976:	4413      	add	r3, r2
 8001978:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800197c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0c5b      	lsrs	r3, r3, #17
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001996:	4413      	add	r3, r2
 8001998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800199c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019a2:	fb02 f203 	mul.w	r2, r2, r3
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e004      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	623b      	str	r3, [r7, #32]
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019c2:	623b      	str	r3, [r7, #32]
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	6a3b      	ldr	r3, [r7, #32]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc90      	pop	{r4, r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	0800395c 	.word	0x0800395c
 80019d8:	0800396c 	.word	0x0800396c
 80019dc:	40021000 	.word	0x40021000
 80019e0:	007a1200 	.word	0x007a1200
 80019e4:	003d0900 	.word	0x003d0900

080019e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000014 	.word	0x20000014

080019fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a00:	f7ff fff2 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a04:	4601      	mov	r1, r0
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	0800447c 	.word	0x0800447c

08001a24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <RCC_Delay+0x34>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <RCC_Delay+0x38>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0a5b      	lsrs	r3, r3, #9
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a40:	bf00      	nop
  }
  while (Delay --);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	60fa      	str	r2, [r7, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f9      	bne.n	8001a40 <RCC_Delay+0x1c>
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000014 	.word	0x20000014
 8001a5c:	10624dd3 	.word	0x10624dd3

08001a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e01d      	b.n	8001aae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f001 fe4a 	bl	8003720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f000 fa18 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b06      	cmp	r3, #6
 8001ade:	d007      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0202 	mvn.w	r2, #2
 8001b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f9ad 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f9a0 	bl	8001e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f9af 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d122      	bne.n	8001bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d11b      	bne.n	8001bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0204 	mvn.w	r2, #4
 8001b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f983 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f976 	bl	8001e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f985 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d122      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d11b      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0208 	mvn.w	r2, #8
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f959 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f94c 	bl	8001e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f95b 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d122      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d11b      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0210 	mvn.w	r2, #16
 8001c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2208      	movs	r2, #8
 8001c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f92f 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f922 	bl	8001e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f931 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0201 	mvn.w	r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8fd 	bl	8001e7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b80      	cmp	r3, #128	; 0x80
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c98:	2b80      	cmp	r3, #128	; 0x80
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa59 	bl	800215e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc4:	2b40      	cmp	r3, #64	; 0x40
 8001cc6:	d107      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8f5 	bl	8001ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d10e      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d107      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0220 	mvn.w	r2, #32
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fa24 	bl	800214c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_TIM_ConfigClockSource+0x18>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e0a6      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x166>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b40      	cmp	r3, #64	; 0x40
 8001d5a:	d067      	beq.n	8001e2c <HAL_TIM_ConfigClockSource+0x120>
 8001d5c:	2b40      	cmp	r3, #64	; 0x40
 8001d5e:	d80b      	bhi.n	8001d78 <HAL_TIM_ConfigClockSource+0x6c>
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d073      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0x140>
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d802      	bhi.n	8001d6e <HAL_TIM_ConfigClockSource+0x62>
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d06f      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d6c:	e078      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d06c      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0x140>
 8001d72:	2b30      	cmp	r3, #48	; 0x30
 8001d74:	d06a      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001d76:	e073      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d78:	2b70      	cmp	r3, #112	; 0x70
 8001d7a:	d00d      	beq.n	8001d98 <HAL_TIM_ConfigClockSource+0x8c>
 8001d7c:	2b70      	cmp	r3, #112	; 0x70
 8001d7e:	d804      	bhi.n	8001d8a <HAL_TIM_ConfigClockSource+0x7e>
 8001d80:	2b50      	cmp	r3, #80	; 0x50
 8001d82:	d033      	beq.n	8001dec <HAL_TIM_ConfigClockSource+0xe0>
 8001d84:	2b60      	cmp	r3, #96	; 0x60
 8001d86:	d041      	beq.n	8001e0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001d88:	e06a      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8e:	d066      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0x152>
 8001d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d94:	d017      	beq.n	8001dc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001d96:	e063      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6899      	ldr	r1, [r3, #8]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f000 f96d 	bl	8002086 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001dba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]
      break;
 8001dc4:	e04c      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6899      	ldr	r1, [r3, #8]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f000 f956 	bl	8002086 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001de8:	609a      	str	r2, [r3, #8]
      break;
 8001dea:	e039      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f000 f8cd 	bl	8001f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2150      	movs	r1, #80	; 0x50
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f924 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001e0a:	e029      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f000 f8eb 	bl	8001ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2160      	movs	r1, #96	; 0x60
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 f914 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001e2a:	e019      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f000 f8ad 	bl	8001f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2140      	movs	r1, #64	; 0x40
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f904 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001e4a:	e009      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f000 f8fb 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001e5c:	e000      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <TIM_Base_SetConfig+0xb8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00b      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d007      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <TIM_Base_SetConfig+0xbc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <TIM_Base_SetConfig+0xc0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d108      	bne.n	8001f16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <TIM_Base_SetConfig+0xb8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d007      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <TIM_Base_SetConfig+0xbc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <TIM_Base_SetConfig+0xc0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d108      	bne.n	8001f48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <TIM_Base_SetConfig+0xb8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	615a      	str	r2, [r3, #20]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800

08001f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0201 	bic.w	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f023 030a 	bic.w	r3, r3, #10
 8001fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	621a      	str	r2, [r3, #32]
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f023 0210 	bic.w	r2, r3, #16
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800201e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	031b      	lsls	r3, r3, #12
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002030:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	621a      	str	r2, [r3, #32]
}
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	f043 0307 	orr.w	r3, r3, #7
 8002074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002086:	b480      	push	{r7}
 8002088:	b087      	sub	sp, #28
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	021a      	lsls	r2, r3, #8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	609a      	str	r2, [r3, #8]
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020d8:	2302      	movs	r3, #2
 80020da:	e032      	b.n	8002142 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002114:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4313      	orrs	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <reverse>:


/*/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\ */

void reverse(char s[])
 {
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7fd ffe5 	bl	800014c <strlen>
 8002182:	4603      	mov	r3, r0
 8002184:	3b01      	subs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	e017      	b.n	80021ba <reverse+0x4a>
         c = s[i];
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	73fb      	strb	r3, [r7, #15]
         s[i] = s[j];
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	441a      	add	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	440b      	add	r3, r1
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	701a      	strb	r2, [r3, #0]
         s[j] = c;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	701a      	strb	r2, [r3, #0]
     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbe3      	blt.n	800218a <reverse+0x1a>
     }
 }
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <itoaK>:

void itoaK(int n, char *s)
 {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
     int i, sign;

     if ((sign = n) < 0)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	da02      	bge.n	80021e6 <itoaK+0x1a>
         n = -n;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	425b      	negs	r3, r3
 80021e4:	607b      	str	r3, [r7, #4]
     i = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
     do {
         s[i++] = n % 10 + '0';
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <itoaK+0x90>)
 80021ee:	fb83 1302 	smull	r1, r3, r3, r2
 80021f2:	1099      	asrs	r1, r3, #2
 80021f4:	17d3      	asrs	r3, r2, #31
 80021f6:	1ac9      	subs	r1, r1, r3
 80021f8:	460b      	mov	r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	1ad1      	subs	r1, r2, r3
 8002202:	b2ca      	uxtb	r2, r1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1c59      	adds	r1, r3, #1
 8002208:	60f9      	str	r1, [r7, #12]
 800220a:	4619      	mov	r1, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	440b      	add	r3, r1
 8002210:	3230      	adds	r2, #48	; 0x30
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]
     } while ((n /= 10) > 0);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a10      	ldr	r2, [pc, #64]	; (800225c <itoaK+0x90>)
 800221a:	fb82 1203 	smull	r1, r2, r2, r3
 800221e:	1092      	asrs	r2, r2, #2
 8002220:	17db      	asrs	r3, r3, #31
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	dcde      	bgt.n	80021ea <itoaK+0x1e>
     if (sign < 0)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	da07      	bge.n	8002242 <itoaK+0x76>
         s[i++] = '-';
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	60fa      	str	r2, [r7, #12]
 8002238:	461a      	mov	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	4413      	add	r3, r2
 800223e:	222d      	movs	r2, #45	; 0x2d
 8002240:	701a      	strb	r2, [r3, #0]
     s[i] = '\0';
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4413      	add	r3, r2
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
     reverse(s);
 800224c:	6838      	ldr	r0, [r7, #0]
 800224e:	f7ff ff8f 	bl	8002170 <reverse>
 }
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	66666667 	.word	0x66666667

08002260 <initSlides>:

void initSlides()
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	// Normal state
	norm_slide1.pic = dino1;
 8002264:	4b42      	ldr	r3, [pc, #264]	; (8002370 <initSlides+0x110>)
 8002266:	4a43      	ldr	r2, [pc, #268]	; (8002374 <initSlides+0x114>)
 8002268:	605a      	str	r2, [r3, #4]
	norm_slide1.width = 20;
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <initSlides+0x110>)
 800226c:	2214      	movs	r2, #20
 800226e:	725a      	strb	r2, [r3, #9]
	norm_slide1.height = 23;
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <initSlides+0x110>)
 8002272:	2217      	movs	r2, #23
 8002274:	721a      	strb	r2, [r3, #8]
	norm_slide1.next = &norm_slide2;
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <initSlides+0x110>)
 8002278:	4a3f      	ldr	r2, [pc, #252]	; (8002378 <initSlides+0x118>)
 800227a:	601a      	str	r2, [r3, #0]

	norm_slide2.pic = dino2;
 800227c:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <initSlides+0x118>)
 800227e:	4a3f      	ldr	r2, [pc, #252]	; (800237c <initSlides+0x11c>)
 8002280:	605a      	str	r2, [r3, #4]
	norm_slide2.width = 20;
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <initSlides+0x118>)
 8002284:	2214      	movs	r2, #20
 8002286:	725a      	strb	r2, [r3, #9]
	norm_slide2.height = 23;
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <initSlides+0x118>)
 800228a:	2217      	movs	r2, #23
 800228c:	721a      	strb	r2, [r3, #8]
	norm_slide2.next = &norm_slide1;
 800228e:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <initSlides+0x118>)
 8002290:	4a37      	ldr	r2, [pc, #220]	; (8002370 <initSlides+0x110>)
 8002292:	601a      	str	r2, [r3, #0]

	curSlideNormal = &norm_slide1;
 8002294:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <initSlides+0x120>)
 8002296:	4a36      	ldr	r2, [pc, #216]	; (8002370 <initSlides+0x110>)
 8002298:	601a      	str	r2, [r3, #0]

	// Sit state
	sit_slide1.pic = dinosit1;
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <initSlides+0x124>)
 800229c:	4a3a      	ldr	r2, [pc, #232]	; (8002388 <initSlides+0x128>)
 800229e:	605a      	str	r2, [r3, #4]
	sit_slide1.width = 28;
 80022a0:	4b38      	ldr	r3, [pc, #224]	; (8002384 <initSlides+0x124>)
 80022a2:	221c      	movs	r2, #28
 80022a4:	725a      	strb	r2, [r3, #9]
	sit_slide1.height = 13;
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <initSlides+0x124>)
 80022a8:	220d      	movs	r2, #13
 80022aa:	721a      	strb	r2, [r3, #8]
	sit_slide1.next = &sit_slide2;
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <initSlides+0x124>)
 80022ae:	4a37      	ldr	r2, [pc, #220]	; (800238c <initSlides+0x12c>)
 80022b0:	601a      	str	r2, [r3, #0]


	sit_slide2.pic = dinosit2;
 80022b2:	4b36      	ldr	r3, [pc, #216]	; (800238c <initSlides+0x12c>)
 80022b4:	4a36      	ldr	r2, [pc, #216]	; (8002390 <initSlides+0x130>)
 80022b6:	605a      	str	r2, [r3, #4]
	sit_slide2.width = 27;
 80022b8:	4b34      	ldr	r3, [pc, #208]	; (800238c <initSlides+0x12c>)
 80022ba:	221b      	movs	r2, #27
 80022bc:	725a      	strb	r2, [r3, #9]
	sit_slide2.height = 13;
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <initSlides+0x12c>)
 80022c0:	220d      	movs	r2, #13
 80022c2:	721a      	strb	r2, [r3, #8]
	sit_slide2.next = &sit_slide1;
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <initSlides+0x12c>)
 80022c6:	4a2f      	ldr	r2, [pc, #188]	; (8002384 <initSlides+0x124>)
 80022c8:	601a      	str	r2, [r3, #0]

	curSlideSit = &sit_slide1;
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <initSlides+0x134>)
 80022cc:	4a2d      	ldr	r2, [pc, #180]	; (8002384 <initSlides+0x124>)
 80022ce:	601a      	str	r2, [r3, #0]

	// Jump state
	jump_slide.pic =dino;
 80022d0:	4b31      	ldr	r3, [pc, #196]	; (8002398 <initSlides+0x138>)
 80022d2:	4a32      	ldr	r2, [pc, #200]	; (800239c <initSlides+0x13c>)
 80022d4:	605a      	str	r2, [r3, #4]
	jump_slide.width = 20;
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <initSlides+0x138>)
 80022d8:	2214      	movs	r2, #20
 80022da:	725a      	strb	r2, [r3, #9]
	jump_slide.height = 23;
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <initSlides+0x138>)
 80022de:	2217      	movs	r2, #23
 80022e0:	721a      	strb	r2, [r3, #8]
	jump_slide.next = NULL;
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <initSlides+0x138>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

	// Bird
	bird_slide1.pic = bird1;
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <initSlides+0x140>)
 80022ea:	4a2e      	ldr	r2, [pc, #184]	; (80023a4 <initSlides+0x144>)
 80022ec:	605a      	str	r2, [r3, #4]
	bird_slide1.width = 21;
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <initSlides+0x140>)
 80022f0:	2215      	movs	r2, #21
 80022f2:	725a      	strb	r2, [r3, #9]
	bird_slide1.height = 15;
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <initSlides+0x140>)
 80022f6:	220f      	movs	r2, #15
 80022f8:	721a      	strb	r2, [r3, #8]
	bird_slide1.next = &bird_slide2;
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <initSlides+0x140>)
 80022fc:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <initSlides+0x148>)
 80022fe:	601a      	str	r2, [r3, #0]

	bird_slide2.pic = bird2;
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <initSlides+0x148>)
 8002302:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <initSlides+0x14c>)
 8002304:	605a      	str	r2, [r3, #4]
	bird_slide2.width = 21;
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <initSlides+0x148>)
 8002308:	2215      	movs	r2, #21
 800230a:	725a      	strb	r2, [r3, #9]
	bird_slide2.height = 13;
 800230c:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <initSlides+0x148>)
 800230e:	220d      	movs	r2, #13
 8002310:	721a      	strb	r2, [r3, #8]
	bird_slide2.next = &bird_slide1;
 8002312:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <initSlides+0x148>)
 8002314:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <initSlides+0x140>)
 8002316:	601a      	str	r2, [r3, #0]

	curSlideBird = &bird_slide1;
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <initSlides+0x150>)
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <initSlides+0x140>)
 800231c:	601a      	str	r2, [r3, #0]
	// Cactus
	cactus1_slide.pic = cactus1;
 800231e:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <initSlides+0x154>)
 8002320:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <initSlides+0x158>)
 8002322:	605a      	str	r2, [r3, #4]
	cactus1_slide.width = 6;
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <initSlides+0x154>)
 8002326:	2206      	movs	r2, #6
 8002328:	725a      	strb	r2, [r3, #9]
	cactus1_slide.height = 11;
 800232a:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <initSlides+0x154>)
 800232c:	220b      	movs	r2, #11
 800232e:	721a      	strb	r2, [r3, #8]
	cactus1_slide.next = NULL;
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <initSlides+0x154>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

	cactus2_slide.pic = cactus2;
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <initSlides+0x15c>)
 8002338:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <initSlides+0x160>)
 800233a:	605a      	str	r2, [r3, #4]
	cactus2_slide.width = 6;
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <initSlides+0x15c>)
 800233e:	2206      	movs	r2, #6
 8002340:	725a      	strb	r2, [r3, #9]
	cactus2_slide.height = 11;
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <initSlides+0x15c>)
 8002344:	220b      	movs	r2, #11
 8002346:	721a      	strb	r2, [r3, #8]
	cactus2_slide.next = NULL;
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <initSlides+0x15c>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

	cactus3_slide.pic = cactus3;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <initSlides+0x164>)
 8002350:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <initSlides+0x168>)
 8002352:	605a      	str	r2, [r3, #4]
	cactus3_slide.width = 12;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <initSlides+0x164>)
 8002356:	220c      	movs	r2, #12
 8002358:	725a      	strb	r2, [r3, #9]
	cactus3_slide.height = 22;
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <initSlides+0x164>)
 800235c:	2216      	movs	r2, #22
 800235e:	721a      	strb	r2, [r3, #8]
	cactus3_slide.next = NULL;
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <initSlides+0x164>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000034 	.word	0x20000034
 8002374:	080039ac 	.word	0x080039ac
 8002378:	20000040 	.word	0x20000040
 800237c:	080039e8 	.word	0x080039e8
 8002380:	2000004c 	.word	0x2000004c
 8002384:	20000050 	.word	0x20000050
 8002388:	08003a24 	.word	0x08003a24
 800238c:	2000005c 	.word	0x2000005c
 8002390:	08003a5c 	.word	0x08003a5c
 8002394:	20000068 	.word	0x20000068
 8002398:	2000006c 	.word	0x2000006c
 800239c:	08003970 	.word	0x08003970
 80023a0:	20000078 	.word	0x20000078
 80023a4:	08003ad0 	.word	0x08003ad0
 80023a8:	20000084 	.word	0x20000084
 80023ac:	08003afc 	.word	0x08003afc
 80023b0:	20000090 	.word	0x20000090
 80023b4:	20000094 	.word	0x20000094
 80023b8:	08003a94 	.word	0x08003a94
 80023bc:	200000a0 	.word	0x200000a0
 80023c0:	08003aa0 	.word	0x08003aa0
 80023c4:	200000ac 	.word	0x200000ac
 80023c8:	08003aac 	.word	0x08003aac

080023cc <initDino>:


void initDino()
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	player.pos_x = 5;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <initDino+0x2c>)
 80023d2:	2205      	movs	r2, #5
 80023d4:	801a      	strh	r2, [r3, #0]
	player.pos_y = ssd1306_GetHeight()-curSlideNormal->height;
 80023d6:	f000 fcb4 	bl	8002d42 <ssd1306_GetHeight>
 80023da:	4603      	mov	r3, r0
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <initDino+0x30>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	7a1b      	ldrb	r3, [r3, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <initDino+0x2c>)
 80023ea:	709a      	strb	r2, [r3, #2]
	player.state = NORMAL;
 80023ec:	4b02      	ldr	r3, [pc, #8]	; (80023f8 <initDino+0x2c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	70da      	strb	r2, [r3, #3]
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200008e4 	.word	0x200008e4
 80023fc:	2000004c 	.word	0x2000004c

08002400 <initGame>:

void initGame()
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	initSlides();
 8002404:	f7ff ff2c 	bl	8002260 <initSlides>
	initDino();
 8002408:	f7ff ffe0 	bl	80023cc <initDino>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <drawRoad>:

void drawRoad()
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af02      	add	r7, sp, #8
	static uint8_t pos = 0;

	ssd1306_DrawBitmap(0,64-6,128,5, &road[pos]);
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <drawRoad+0x40>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <drawRoad+0x44>)
 800241e:	4413      	add	r3, r2
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2305      	movs	r3, #5
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	213a      	movs	r1, #58	; 0x3a
 8002428:	2000      	movs	r0, #0
 800242a:	f000 ff51 	bl	80032d0 <ssd1306_DrawBitmap>

	pos+=2;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <drawRoad+0x40>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	3302      	adds	r3, #2
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <drawRoad+0x40>)
 8002438:	701a      	strb	r2, [r3, #0]
	if (pos >= 128)
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <drawRoad+0x40>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b25b      	sxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	da02      	bge.n	800244a <drawRoad+0x3a>
		pos = 1;
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <drawRoad+0x40>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200000d0 	.word	0x200000d0
 8002454:	08003b28 	.word	0x08003b28

08002458 <createEntity>:


void createEntity(enum type type)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	uint8_t iter = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
	while(slist[iter])
 8002466:	e002      	b.n	800246e <createEntity+0x16>
	{
		iter++;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	3301      	adds	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
	while(slist[iter])
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <createEntity+0xd4>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f7      	bne.n	8002468 <createEntity+0x10>
	}
	slist[iter] = 1;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	4a2c      	ldr	r2, [pc, #176]	; (800252c <createEntity+0xd4>)
 800247c:	2101      	movs	r1, #1
 800247e:	54d1      	strb	r1, [r2, r3]
	switch (type)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <createEntity+0x34>
 8002486:	2b01      	cmp	r3, #1
 8002488:	d023      	beq.n	80024d2 <createEntity+0x7a>
		objList[iter].pos_y = ssd1306_GetHeight()-bird_slide1.height-3;
		break;
	}


}
 800248a:	e04b      	b.n	8002524 <createEntity+0xcc>
		objList[iter].ticks=0;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	4a28      	ldr	r2, [pc, #160]	; (8002530 <createEntity+0xd8>)
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	2200      	movs	r2, #0
 8002496:	709a      	strb	r2, [r3, #2]
		objList[iter].slides = &cactus3_slide;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	4a25      	ldr	r2, [pc, #148]	; (8002530 <createEntity+0xd8>)
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	4a24      	ldr	r2, [pc, #144]	; (8002534 <createEntity+0xdc>)
 80024a2:	605a      	str	r2, [r3, #4]
		objList[iter].pos_x = ssd1306_GetWidth()-cactus3_slide.width-1;
 80024a4:	f000 fc46 	bl	8002d34 <ssd1306_GetWidth>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <createEntity+0xdc>)
 80024ae:	7a5b      	ldrb	r3, [r3, #9]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	3a01      	subs	r2, #1
 80024b8:	b2d1      	uxtb	r1, r2
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <createEntity+0xd8>)
 80024bc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		objList[iter].pos_y = cactus3_slide.height;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <createEntity+0xdc>)
 80024c4:	7a11      	ldrb	r1, [r2, #8]
 80024c6:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <createEntity+0xd8>)
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	460a      	mov	r2, r1
 80024ce:	705a      	strb	r2, [r3, #1]
		break;
 80024d0:	e028      	b.n	8002524 <createEntity+0xcc>
		objList[iter].ticks=0;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	4a16      	ldr	r2, [pc, #88]	; (8002530 <createEntity+0xd8>)
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	2200      	movs	r2, #0
 80024dc:	709a      	strb	r2, [r3, #2]
		objList[iter].slides = &bird_slide1;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <createEntity+0xd8>)
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	4a14      	ldr	r2, [pc, #80]	; (8002538 <createEntity+0xe0>)
 80024e8:	605a      	str	r2, [r3, #4]
		objList[iter].pos_x = ssd1306_GetWidth()-bird_slide1.width;
 80024ea:	f000 fc23 	bl	8002d34 <ssd1306_GetWidth>
 80024ee:	4603      	mov	r3, r0
 80024f0:	b2d9      	uxtb	r1, r3
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <createEntity+0xe0>)
 80024f4:	7a5a      	ldrb	r2, [r3, #9]
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	1a8a      	subs	r2, r1, r2
 80024fa:	b2d1      	uxtb	r1, r2
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <createEntity+0xd8>)
 80024fe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		objList[iter].pos_y = ssd1306_GetHeight()-bird_slide1.height-3;
 8002502:	f000 fc1e 	bl	8002d42 <ssd1306_GetHeight>
 8002506:	4603      	mov	r3, r0
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <createEntity+0xe0>)
 800250c:	7a1b      	ldrb	r3, [r3, #8]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	b2da      	uxtb	r2, r3
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3a03      	subs	r2, #3
 8002516:	b2d1      	uxtb	r1, r2
 8002518:	4a05      	ldr	r2, [pc, #20]	; (8002530 <createEntity+0xd8>)
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	460a      	mov	r2, r1
 8002520:	705a      	strb	r2, [r3, #1]
		break;
 8002522:	bf00      	nop
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200000bc 	.word	0x200000bc
 8002530:	200008e8 	.word	0x200008e8
 8002534:	200000ac 	.word	0x200000ac
 8002538:	20000078 	.word	0x20000078

0800253c <drawEntities>:

void drawEntities()
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
	uint8_t iter = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	71fb      	strb	r3, [r7, #7]
	while(iter < 20)
 8002546:	e00f      	b.n	8002568 <drawEntities+0x2c>
	{
		if (slist[iter])
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <drawEntities+0x3c>)
 800254c:	5cd3      	ldrb	r3, [r2, r3]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <drawEntities+0x26>
		{
			drawEntity(&objList[iter], 1);
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4a09      	ldr	r2, [pc, #36]	; (800257c <drawEntities+0x40>)
 8002558:	4413      	add	r3, r2
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f80f 	bl	8002580 <drawEntity>
		}
		iter++;
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	3301      	adds	r3, #1
 8002566:	71fb      	strb	r3, [r7, #7]
	while(iter < 20)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b13      	cmp	r3, #19
 800256c:	d9ec      	bls.n	8002548 <drawEntities+0xc>
	}
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200000bc 	.word	0x200000bc
 800257c:	200008e8 	.word	0x200008e8

08002580 <drawEntity>:


void drawEntity(object *entity, uint8_t scale)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af02      	add	r7, sp, #8
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
	if (entity != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d031      	beq.n	80025f6 <drawEntity+0x76>
	{
		if ( entity->ticks >= scale)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	789b      	ldrb	r3, [r3, #2]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	429a      	cmp	r2, r3
 800259a:	d80d      	bhi.n	80025b8 <drawEntity+0x38>
		{
			entity->ticks = 0;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	709a      	strb	r2, [r3, #2]
			if (entity->slides->next != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00b      	beq.n	80025c4 <drawEntity+0x44>
				entity->slides = entity->slides->next;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	e005      	b.n	80025c4 <drawEntity+0x44>
		}
		else {
			entity->ticks++;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	789b      	ldrb	r3, [r3, #2]
 80025bc:	3301      	adds	r3, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	709a      	strb	r2, [r3, #2]
		}
		ssd1306_DrawBitmap(entity->pos_x,ssd1306_GetHeight()- entity->pos_y,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b25c      	sxtb	r4, r3
 80025ca:	f000 fbba 	bl	8002d42 <ssd1306_GetHeight>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	b2d9      	uxtb	r1, r3
						entity->slides->width, entity->slides->height, entity->slides->pic);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
		ssd1306_DrawBitmap(entity->pos_x,ssd1306_GetHeight()- entity->pos_y,
 80025de:	7a5a      	ldrb	r2, [r3, #9]
						entity->slides->width, entity->slides->height, entity->slides->pic);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
		ssd1306_DrawBitmap(entity->pos_x,ssd1306_GetHeight()- entity->pos_y,
 80025e4:	7a18      	ldrb	r0, [r3, #8]
						entity->slides->width, entity->slides->height, entity->slides->pic);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
		ssd1306_DrawBitmap(entity->pos_x,ssd1306_GetHeight()- entity->pos_y,
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	4603      	mov	r3, r0
 80025f0:	4620      	mov	r0, r4
 80025f2:	f000 fe6d 	bl	80032d0 <ssd1306_DrawBitmap>
	}

}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}
	...

08002600 <drawDino>:
}
*/


void drawDino(uint8_t run_sc, uint8_t jump_sc, uint8_t fall_sc)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b087      	sub	sp, #28
 8002604:	af02      	add	r7, sp, #8
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
 800260a:	460b      	mov	r3, r1
 800260c:	71bb      	strb	r3, [r7, #6]
 800260e:	4613      	mov	r3, r2
 8002610:	717b      	strb	r3, [r7, #5]
	const uint8_t jumpSize = 30;
 8002612:	231e      	movs	r3, #30
 8002614:	73fb      	strb	r3, [r7, #15]
	static uint8_t tmp = 0;
	tmp++;
 8002616:	4b51      	ldr	r3, [pc, #324]	; (800275c <drawDino+0x15c>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4b4f      	ldr	r3, [pc, #316]	; (800275c <drawDino+0x15c>)
 8002620:	701a      	strb	r2, [r3, #0]

	switch (player.state)
 8002622:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <drawDino+0x160>)
 8002624:	78db      	ldrb	r3, [r3, #3]
 8002626:	2b03      	cmp	r3, #3
 8002628:	f200 8094 	bhi.w	8002754 <drawDino+0x154>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <drawDino+0x34>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002645 	.word	0x08002645
 8002638:	08002753 	.word	0x08002753
 800263c:	08002687 	.word	0x08002687
 8002640:	080026e5 	.word	0x080026e5
	{
	case NORMAL:
		if (tmp >= run_sc)
 8002644:	4b45      	ldr	r3, [pc, #276]	; (800275c <drawDino+0x15c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	429a      	cmp	r2, r3
 800264c:	d807      	bhi.n	800265e <drawDino+0x5e>
		{
			curSlideNormal = curSlideNormal->next;
 800264e:	4b45      	ldr	r3, [pc, #276]	; (8002764 <drawDino+0x164>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a43      	ldr	r2, [pc, #268]	; (8002764 <drawDino+0x164>)
 8002656:	6013      	str	r3, [r2, #0]
			tmp = 0;
 8002658:	4b40      	ldr	r3, [pc, #256]	; (800275c <drawDino+0x15c>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
		}
		ssd1306_DrawBitmap(player.pos_x,player.pos_y,curSlideNormal->width, curSlideNormal->height, curSlideNormal->pic);
 800265e:	4b40      	ldr	r3, [pc, #256]	; (8002760 <drawDino+0x160>)
 8002660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002664:	b258      	sxtb	r0, r3
 8002666:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <drawDino+0x160>)
 8002668:	7899      	ldrb	r1, [r3, #2]
 800266a:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <drawDino+0x164>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	7a5a      	ldrb	r2, [r3, #9]
 8002670:	4b3c      	ldr	r3, [pc, #240]	; (8002764 <drawDino+0x164>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	7a1c      	ldrb	r4, [r3, #8]
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <drawDino+0x164>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4623      	mov	r3, r4
 8002680:	f000 fe26 	bl	80032d0 <ssd1306_DrawBitmap>

		break;
 8002684:	e066      	b.n	8002754 <drawDino+0x154>
	case SIT:
		// I don't have 2 buttons ((
		break;
	case JUMP:
		if (tmp >= jump_sc)
 8002686:	4b35      	ldr	r3, [pc, #212]	; (800275c <drawDino+0x15c>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	79ba      	ldrb	r2, [r7, #6]
 800268c:	429a      	cmp	r2, r3
 800268e:	d818      	bhi.n	80026c2 <drawDino+0xc2>
		{
			if (player.pos_y <= ssd1306_GetHeight() - jumpSize-curSlideNormal->height)
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <drawDino+0x160>)
 8002692:	789b      	ldrb	r3, [r3, #2]
 8002694:	461c      	mov	r4, r3
 8002696:	f000 fb54 	bl	8002d42 <ssd1306_GetHeight>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	4a30      	ldr	r2, [pc, #192]	; (8002764 <drawDino+0x164>)
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	7a12      	ldrb	r2, [r2, #8]
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	429c      	cmp	r4, r3
 80026ac:	dc03      	bgt.n	80026b6 <drawDino+0xb6>
				player.state = FALL;
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <drawDino+0x160>)
 80026b0:	2203      	movs	r2, #3
 80026b2:	70da      	strb	r2, [r3, #3]
 80026b4:	e005      	b.n	80026c2 <drawDino+0xc2>
			else
				player.pos_y-= JUMP_SPEED;
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <drawDino+0x160>)
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	3b05      	subs	r3, #5
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b28      	ldr	r3, [pc, #160]	; (8002760 <drawDino+0x160>)
 80026c0:	709a      	strb	r2, [r3, #2]
		}
		ssd1306_DrawBitmap(player.pos_x,player.pos_y,jump_slide.width, jump_slide.height, jump_slide.pic);
 80026c2:	4b27      	ldr	r3, [pc, #156]	; (8002760 <drawDino+0x160>)
 80026c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c8:	b258      	sxtb	r0, r3
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <drawDino+0x160>)
 80026cc:	7899      	ldrb	r1, [r3, #2]
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <drawDino+0x168>)
 80026d0:	7a5a      	ldrb	r2, [r3, #9]
 80026d2:	4b25      	ldr	r3, [pc, #148]	; (8002768 <drawDino+0x168>)
 80026d4:	7a1c      	ldrb	r4, [r3, #8]
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <drawDino+0x168>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4623      	mov	r3, r4
 80026de:	f000 fdf7 	bl	80032d0 <ssd1306_DrawBitmap>

		break;
 80026e2:	e037      	b.n	8002754 <drawDino+0x154>
	case FALL:
		if (tmp >= fall_sc)
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <drawDino+0x15c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	797a      	ldrb	r2, [r7, #5]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d820      	bhi.n	8002730 <drawDino+0x130>
		{
			player.pos_y+= FALL_SPEED;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <drawDino+0x160>)
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	3305      	adds	r3, #5
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <drawDino+0x160>)
 80026f8:	709a      	strb	r2, [r3, #2]
			if (player.pos_y >= ssd1306_GetHeight()-curSlideNormal->height)
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <drawDino+0x160>)
 80026fc:	789b      	ldrb	r3, [r3, #2]
 80026fe:	461c      	mov	r4, r3
 8002700:	f000 fb1f 	bl	8002d42 <ssd1306_GetHeight>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <drawDino+0x164>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	7a1b      	ldrb	r3, [r3, #8]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	429c      	cmp	r4, r3
 8002712:	db0d      	blt.n	8002730 <drawDino+0x130>
			{
				player.pos_y = ssd1306_GetHeight()-curSlideNormal->height;        // if FALL_SPEED != JUMP_SPEED
 8002714:	f000 fb15 	bl	8002d42 <ssd1306_GetHeight>
 8002718:	4603      	mov	r3, r0
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <drawDino+0x164>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	7a1b      	ldrb	r3, [r3, #8]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <drawDino+0x160>)
 8002728:	709a      	strb	r2, [r3, #2]
				player.state = NORMAL;
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <drawDino+0x160>)
 800272c:	2200      	movs	r2, #0
 800272e:	70da      	strb	r2, [r3, #3]
			}
		}
		ssd1306_DrawBitmap(player.pos_x,player.pos_y,jump_slide.width, jump_slide.height, jump_slide.pic);
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <drawDino+0x160>)
 8002732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002736:	b258      	sxtb	r0, r3
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <drawDino+0x160>)
 800273a:	7899      	ldrb	r1, [r3, #2]
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <drawDino+0x168>)
 800273e:	7a5a      	ldrb	r2, [r3, #9]
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <drawDino+0x168>)
 8002742:	7a1c      	ldrb	r4, [r3, #8]
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <drawDino+0x168>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	4623      	mov	r3, r4
 800274c:	f000 fdc0 	bl	80032d0 <ssd1306_DrawBitmap>
		break;
 8002750:	e000      	b.n	8002754 <drawDino+0x154>
		break;
 8002752:	bf00      	nop
	}

}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	200000d1 	.word	0x200000d1
 8002760:	200008e4 	.word	0x200008e4
 8002764:	2000004c 	.word	0x2000004c
 8002768:	2000006c 	.word	0x2000006c

0800276c <normalizeField>:

void normalizeField()
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	static uint8_t t= 0;
	static uint8_t typek;

	if (t > SPAWN_SPEED_BASE - points/XSPEED_SPAWN)
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <normalizeField+0x60>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <normalizeField+0x64>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <normalizeField+0x68>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	b29b      	uxth	r3, r3
 8002784:	f1c3 030a 	rsb	r3, r3, #10
 8002788:	4299      	cmp	r1, r3
 800278a:	dd16      	ble.n	80027ba <normalizeField+0x4e>
	{
		typek++;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <normalizeField+0x6c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <normalizeField+0x6c>)
 8002796:	701a      	strb	r2, [r3, #0]
		if (typek <= 2)
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <normalizeField+0x6c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d803      	bhi.n	80027a8 <normalizeField+0x3c>
		{
			createEntity(CACTUS);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7ff fe59 	bl	8002458 <createEntity>
 80027a6:	e005      	b.n	80027b4 <normalizeField+0x48>
		}
		else
		{
			createEntity(BIRD);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7ff fe55 	bl	8002458 <createEntity>
			typek = 0;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <normalizeField+0x6c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
		}
		t= 0;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <normalizeField+0x60>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
	}
	t++;
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <normalizeField+0x60>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b02      	ldr	r3, [pc, #8]	; (80027cc <normalizeField+0x60>)
 80027c4:	701a      	strb	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200000d2 	.word	0x200000d2
 80027d0:	200000b8 	.word	0x200000b8
 80027d4:	cccccccd 	.word	0xcccccccd
 80027d8:	200000d3 	.word	0x200000d3

080027dc <drawPoints>:

// draws score
void drawPoints()
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
	char buff[8] = {0};
 80027e2:	463b      	mov	r3, r7
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
	itoaK(points, buff);
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <drawPoints+0x48>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	463b      	mov	r3, r7
 80027f2:	4619      	mov	r1, r3
 80027f4:	4610      	mov	r0, r2
 80027f6:	f7ff fce9 	bl	80021cc <itoaK>
	ssd1306_SetCursor(ssd1306_GetWidth()-30, 0);
 80027fa:	f000 fa9b 	bl	8002d34 <ssd1306_GetWidth>
 80027fe:	4603      	mov	r3, r0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3b1e      	subs	r3, #30
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f000 febf 	bl	800358c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10);
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <drawPoints+0x4c>)
 8002810:	4638      	mov	r0, r7
 8002812:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002816:	f000 fe45 	bl	80034a4 <ssd1306_WriteString>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200000b8 	.word	0x200000b8
 8002828:	20000008 	.word	0x20000008

0800282c <draw>:

void draw()
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	normalizeField(); //  spawns barriers
 8002830:	f7ff ff9c 	bl	800276c <normalizeField>
	ssd1306_Clear();
 8002834:	f000 fec2 	bl	80035bc <ssd1306_Clear>
	drawEntities();
 8002838:	f7ff fe80 	bl	800253c <drawEntities>
	processEntities(BASE_SPEED+points/XSPEED_BY_TIME);  // speed depends on points(time playing)
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <draw+0x44>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <draw+0x48>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	b29b      	uxth	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3305      	adds	r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f811 	bl	8002878 <processEntities>
	drawPoints();
 8002856:	f7ff ffc1 	bl	80027dc <drawPoints>

	drawRoad();
 800285a:	f7ff fdd9 	bl	8002410 <drawRoad>
	drawDino(2,1,1);
 800285e:	2201      	movs	r2, #1
 8002860:	2101      	movs	r1, #1
 8002862:	2002      	movs	r0, #2
 8002864:	f7ff fecc 	bl	8002600 <drawDino>
	ssd1306_UpdateScreen();
 8002868:	f000 fb1c 	bl	8002ea4 <ssd1306_UpdateScreen>

}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200000b8 	.word	0x200000b8
 8002874:	51eb851f 	.word	0x51eb851f

08002878 <processEntities>:


void processEntities(uint8_t speed) // 10 is fast already
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af02      	add	r7, sp, #8
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
	uint8_t iter = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
	while(iter < 20)
 8002886:	e02e      	b.n	80028e6 <processEntities+0x6e>
	{
		if (slist[iter])
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <processEntities+0x7c>)
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d026      	beq.n	80028e0 <processEntities+0x68>
		{
			objList[iter].pos_x-=speed;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <processEntities+0x80>)
 8002896:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	79fa      	ldrb	r2, [r7, #7]
 800289e:	1a8a      	subs	r2, r1, r2
 80028a0:	b2d1      	uxtb	r1, r2
 80028a2:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <processEntities+0x80>)
 80028a4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

			if (objList[iter].pos_x <= speed)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <processEntities+0x80>)
 80028ac:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80028b0:	79fa      	ldrb	r2, [r7, #7]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d303      	bcc.n	80028be <processEntities+0x46>
				slist[iter] = 0;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <processEntities+0x7c>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	54d1      	strb	r1, [r2, r3]

			if (ssd1306_TestForPixels(player.pos_x, player.pos_y, 20, 23, dinoTest))
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <processEntities+0x84>)
 80028c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c4:	b2d8      	uxtb	r0, r3
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <processEntities+0x84>)
 80028c8:	7899      	ldrb	r1, [r3, #2]
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <processEntities+0x88>)
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2317      	movs	r3, #23
 80028d0:	2214      	movs	r2, #20
 80028d2:	f000 fe0d 	bl	80034f0 <ssd1306_TestForPixels>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <processEntities+0x68>
				end();
 80028dc:	f000 f812 	bl	8002904 <end>

		}
		iter++;
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	3301      	adds	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
	while(iter < 20)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b13      	cmp	r3, #19
 80028ea:	d9cd      	bls.n	8002888 <processEntities+0x10>
	}
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200000bc 	.word	0x200000bc
 80028f8:	200008e8 	.word	0x200008e8
 80028fc:	200008e4 	.word	0x200008e4
 8002900:	08003cc4 	.word	0x08003cc4

08002904 <end>:

void end()
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af02      	add	r7, sp, #8
	gameState = 0;
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <end+0x24>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
	ssd1306_DrawBitmap(10,10, 78, 9, endGame);
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <end+0x28>)
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2309      	movs	r3, #9
 8002916:	224e      	movs	r2, #78	; 0x4e
 8002918:	210a      	movs	r1, #10
 800291a:	200a      	movs	r0, #10
 800291c:	f000 fcd8 	bl	80032d0 <ssd1306_DrawBitmap>
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000005 	.word	0x20000005
 800292c:	08003c28 	.word	0x08003c28

08002930 <SetJumpState>:

void SetJumpState()
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
	player.state = JUMP;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <SetJumpState+0x14>)
 8002936:	2202      	movs	r2, #2
 8002938:	70da      	strb	r2, [r3, #3]

}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	200008e4 	.word	0x200008e4

08002948 <getState>:

uint8_t getState()    // bad usage
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	if (!gameState)
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <getState+0x28>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <getState+0x10>
		return 2;
 8002954:	2302      	movs	r3, #2
 8002956:	e006      	b.n	8002966 <getState+0x1e>
	if (player.state == NORMAL)
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <getState+0x2c>)
 800295a:	78db      	ldrb	r3, [r3, #3]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <getState+0x1c>
		return 1;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <getState+0x1e>
	return 0;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20000005 	.word	0x20000005
 8002974:	200008e4 	.word	0x200008e4

08002978 <startGame>:
void startGame()
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
	points = 0;
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <startGame+0x38>)
 8002980:	2200      	movs	r2, #0
 8002982:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 20; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	e006      	b.n	8002998 <startGame+0x20>
		slist[i] = 0;
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <startGame+0x3c>)
 800298e:	2100      	movs	r1, #0
 8002990:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 20; i++)
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	3301      	adds	r3, #1
 8002996:	71fb      	strb	r3, [r7, #7]
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	2b13      	cmp	r3, #19
 800299c:	d9f5      	bls.n	800298a <startGame+0x12>
	gameState = 1;
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <startGame+0x40>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200000b8 	.word	0x200000b8
 80029b4:	200000bc 	.word	0x200000bc
 80029b8:	20000005 	.word	0x20000005

080029bc <__NVIC_SetPriority>:
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <SysTick_Config>:
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a20:	d301      	bcc.n	8002a26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <SysTick_Config+0x40>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2e:	210f      	movs	r1, #15
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f7ff ffc2 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <SysTick_Config+0x40>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <SysTick_Config+0x40>)
 8002a40:	2207      	movs	r2, #7
 8002a42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a58:	f7fd fb80 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a5c:	f000 f822 	bl	8002aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a60:	f000 f8e4 	bl	8002c2c <MX_GPIO_Init>
  MX_I2C2_Init();
 8002a64:	f000 f864 	bl	8002b30 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002a68:	f000 f890 	bl	8002b8c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SysTick_Config(SystemCoreClock/152);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <main+0x44>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <main+0x48>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ffc8 	bl	8002a10 <SysTick_Config>
  ssd1306_Init();
 8002a80:	f000 f976 	bl	8002d70 <ssd1306_Init>
  ssd1306_SetColor(White);
 8002a84:	2001      	movs	r0, #1
 8002a86:	f000 f963 	bl	8002d50 <ssd1306_SetColor>
  initGame();
 8002a8a:	f7ff fcb9 	bl	8002400 <initGame>
  HAL_TIM_Base_Start_IT(&htim1);
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <main+0x4c>)
 8002a90:	f7ff f811 	bl	8001ab6 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <main+0x40>
 8002a96:	bf00      	nop
 8002a98:	20000014 	.word	0x20000014
 8002a9c:	1af286bd 	.word	0x1af286bd
 8002aa0:	200009dc 	.word	0x200009dc

08002aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b090      	sub	sp, #64	; 0x40
 8002aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aaa:	f107 0318 	add.w	r3, r7, #24
 8002aae:	2228      	movs	r2, #40	; 0x28
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 ff3e 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ae2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae8:	f107 0318 	add.w	r3, r7, #24
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe fbaf 	bl	8001250 <HAL_RCC_OscConfig>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002af8:	f000 f908 	bl	8002d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002afc:	230f      	movs	r3, #15
 8002afe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b00:	2302      	movs	r3, #2
 8002b02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fe1a 	bl	8001750 <HAL_RCC_ClockConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002b22:	f000 f8f3 	bl	8002d0c <Error_Handler>
  }
}
 8002b26:	bf00      	nop
 8002b28:	3740      	adds	r7, #64	; 0x40
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <MX_I2C2_Init+0x54>)
 8002b38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b3c:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <MX_I2C2_Init+0x58>)
 8002b3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b6c:	4804      	ldr	r0, [pc, #16]	; (8002b80 <MX_I2C2_Init+0x50>)
 8002b6e:	f7fd fe1b 	bl	80007a8 <HAL_I2C_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b78:	f000 f8c8 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000988 	.word	0x20000988
 8002b84:	40005800 	.word	0x40005800
 8002b88:	00061a80 	.word	0x00061a80

08002b8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b92:	f107 0308 	add.w	r3, r7, #8
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <MX_TIM1_Init+0x9c>)
 8002bac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90;
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002bb0:	225a      	movs	r2, #90	; 0x5a
 8002bb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002bbc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002bc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bd4:	4813      	ldr	r0, [pc, #76]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002bd6:	f7fe ff43 	bl	8001a60 <HAL_TIM_Base_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002be0:	f000 f894 	bl	8002d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bea:	f107 0308 	add.w	r3, r7, #8
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002bf2:	f7ff f88b 	bl	8001d0c <HAL_TIM_ConfigClockSource>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002bfc:	f000 f886 	bl	8002d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c00:	2300      	movs	r3, #0
 8002c02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c08:	463b      	mov	r3, r7
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4805      	ldr	r0, [pc, #20]	; (8002c24 <MX_TIM1_Init+0x98>)
 8002c0e:	f7ff fa59 	bl	80020c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c18:	f000 f878 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c1c:	bf00      	nop
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	200009dc 	.word	0x200009dc
 8002c28:	40012c00 	.word	0x40012c00

08002c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c46:	f043 0310 	orr.w	r3, r3, #16
 8002c4a:	6193      	str	r3, [r2, #24]
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c58:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c88:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c8e:	f043 0308 	orr.w	r3, r3, #8
 8002c92:	6193      	str	r3, [r2, #24]
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <MX_GPIO_Init+0xd0>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ca6:	4816      	ldr	r0, [pc, #88]	; (8002d00 <MX_GPIO_Init+0xd4>)
 8002ca8:	f7fd fd44 	bl	8000734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbe:	f107 0310 	add.w	r3, r7, #16
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480e      	ldr	r0, [pc, #56]	; (8002d00 <MX_GPIO_Init+0xd4>)
 8002cc6:	f7fd fbdb 	bl	8000480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <MX_GPIO_Init+0xd8>)
 8002cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480a      	ldr	r0, [pc, #40]	; (8002d08 <MX_GPIO_Init+0xdc>)
 8002cde:	f7fd fbcf 	bl	8000480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2006      	movs	r0, #6
 8002ce8:	f7fd fb93 	bl	8000412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002cec:	2006      	movs	r0, #6
 8002cee:	f7fd fbac 	bl	800044a <HAL_NVIC_EnableIRQ>

}
 8002cf2:	bf00      	nop
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40011000 	.word	0x40011000
 8002d04:	10110000 	.word	0x10110000
 8002d08:	40010800 	.word	0x40010800

08002d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	2340      	movs	r3, #64	; 0x40
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <ssd1306_GetWidth>:
/* CODE END Private functions */

/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8002d38:	2380      	movs	r3, #128	; 0x80
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8002d46:	2340      	movs	r3, #64	; 0x40
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <ssd1306_SetColor>:
{
	return SSD1306.Color;
}

void ssd1306_SetColor(SSD1306_COLOR color)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <ssd1306_SetColor+0x1c>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	7153      	strb	r3, [r2, #5]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	200008d4 	.word	0x200008d4

08002d70 <ssd1306_Init>:

//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8002d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d78:	2205      	movs	r2, #5
 8002d7a:	2178      	movs	r1, #120	; 0x78
 8002d7c:	4846      	ldr	r0, [pc, #280]	; (8002e98 <ssd1306_Init+0x128>)
 8002d7e:	f7fd ff35 	bl	8000bec <HAL_I2C_IsDeviceReady>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 8002d88:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <ssd1306_Init+0x12c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e07f      	b.n	8002e92 <ssd1306_Init+0x122>
	}

	// Wait for the screen to boot
	HAL_Delay(100);
 8002d92:	2064      	movs	r0, #100	; 0x64
 8002d94:	f7fd fa44 	bl	8000220 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8002d98:	20ae      	movs	r0, #174	; 0xae
 8002d9a:	f000 fc1f 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8002d9e:	20d5      	movs	r0, #213	; 0xd5
 8002da0:	f000 fc1c 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8002da4:	20f0      	movs	r0, #240	; 0xf0
 8002da6:	f000 fc19 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8002daa:	20a8      	movs	r0, #168	; 0xa8
 8002dac:	f000 fc16 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8002db0:	f7ff ffb9 	bl	8002d26 <height>
 8002db4:	4603      	mov	r3, r0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fc0d 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8002dc2:	20d3      	movs	r0, #211	; 0xd3
 8002dc4:	f000 fc0a 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f000 fc07 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8002dce:	2040      	movs	r0, #64	; 0x40
 8002dd0:	f000 fc04 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8002dd4:	208d      	movs	r0, #141	; 0x8d
 8002dd6:	f000 fc01 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8002dda:	2014      	movs	r0, #20
 8002ddc:	f000 fbfe 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8002de0:	2020      	movs	r0, #32
 8002de2:	f000 fbfb 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f000 fbf8 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8002dec:	20a0      	movs	r0, #160	; 0xa0
 8002dee:	f000 fbf5 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8002df2:	20c0      	movs	r0, #192	; 0xc0
 8002df4:	f000 fbf2 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8002df8:	20da      	movs	r0, #218	; 0xda
 8002dfa:	f000 fbef 	bl	80035dc <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <ssd1306_Init+0x130>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 8002e06:	2012      	movs	r0, #18
 8002e08:	f000 fbe8 	bl	80035dc <ssd1306_WriteCommand>
 8002e0c:	e006      	b.n	8002e1c <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <ssd1306_Init+0x130>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 8002e16:	2002      	movs	r0, #2
 8002e18:	f000 fbe0 	bl	80035dc <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 8002e1c:	2081      	movs	r0, #129	; 0x81
 8002e1e:	f000 fbdd 	bl	80035dc <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8002e22:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <ssd1306_Init+0x130>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 8002e2a:	20cf      	movs	r0, #207	; 0xcf
 8002e2c:	f000 fbd6 	bl	80035dc <ssd1306_WriteCommand>
 8002e30:	e006      	b.n	8002e40 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <ssd1306_Init+0x130>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d102      	bne.n	8002e40 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 8002e3a:	208f      	movs	r0, #143	; 0x8f
 8002e3c:	f000 fbce 	bl	80035dc <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 8002e40:	20d9      	movs	r0, #217	; 0xd9
 8002e42:	f000 fbcb 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 8002e46:	20f1      	movs	r0, #241	; 0xf1
 8002e48:	f000 fbc8 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8002e4c:	20db      	movs	r0, #219	; 0xdb
 8002e4e:	f000 fbc5 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8002e52:	2040      	movs	r0, #64	; 0x40
 8002e54:	f000 fbc2 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8002e58:	20a4      	movs	r0, #164	; 0xa4
 8002e5a:	f000 fbbf 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8002e5e:	20a6      	movs	r0, #166	; 0xa6
 8002e60:	f000 fbbc 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8002e64:	202e      	movs	r0, #46	; 0x2e
 8002e66:	f000 fbb9 	bl	80035dc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8002e6a:	20af      	movs	r0, #175	; 0xaf
 8002e6c:	f000 fbb6 	bl	80035dc <ssd1306_WriteCommand>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <ssd1306_Init+0x12c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <ssd1306_Init+0x12c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <ssd1306_Init+0x12c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 8002e82:	f000 fb9b 	bl	80035bc <ssd1306_Clear>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8002e86:	f000 f80d 	bl	8002ea4 <ssd1306_UpdateScreen>

	SSD1306.Initialized = 1;
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <ssd1306_Init+0x12c>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000988 	.word	0x20000988
 8002e9c:	200008d4 	.word	0x200008d4
 8002ea0:	200008dd 	.word	0x200008dd

08002ea4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	71fb      	strb	r3, [r7, #7]
 8002eae:	e01a      	b.n	8002ee6 <ssd1306_UpdateScreen+0x42>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	3b50      	subs	r3, #80	; 0x50
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fb90 	bl	80035dc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f000 fb8d 	bl	80035dc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8002ec2:	2010      	movs	r0, #16
 8002ec4:	f000 fb8a 	bl	80035dc <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <ssd1306_UpdateScreen+0x50>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	79fa      	ldrb	r2, [r7, #7]
 8002ece:	01d2      	lsls	r2, r2, #7
 8002ed0:	189c      	adds	r4, r3, r2
 8002ed2:	f7ff ff21 	bl	8002d18 <width>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4620      	mov	r0, r4
 8002edc:	f000 fb96 	bl	800360c <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d9e1      	bls.n	8002eb0 <ssd1306_UpdateScreen+0xc>
	}
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}
 8002ef4:	20000010 	.word	0x20000010

08002ef8 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	460a      	mov	r2, r1
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	4613      	mov	r3, r2
 8002f08:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 8002f0a:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <ssd1306_DrawPixel+0x1ac>)
 8002f0c:	795b      	ldrb	r3, [r3, #5]
 8002f0e:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	b29c      	uxth	r4, r3
 8002f14:	f7ff ff0e 	bl	8002d34 <ssd1306_GetWidth>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	429c      	cmp	r4, r3
 8002f1c:	f080 80bd 	bcs.w	800309a <ssd1306_DrawPixel+0x1a2>
 8002f20:	79bb      	ldrb	r3, [r7, #6]
 8002f22:	b29c      	uxth	r4, r3
 8002f24:	f7ff ff0d 	bl	8002d42 <ssd1306_GetHeight>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	429c      	cmp	r4, r3
 8002f2c:	f080 80b5 	bcs.w	800309a <ssd1306_DrawPixel+0x1a2>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8002f30:	4b5c      	ldr	r3, [pc, #368]	; (80030a4 <ssd1306_DrawPixel+0x1ac>)
 8002f32:	791b      	ldrb	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d006      	beq.n	8002f46 <ssd1306_DrawPixel+0x4e>
	{
		color = (SSD1306_COLOR) !color;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color

	if (!rotate)
 8002f46:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <ssd1306_DrawPixel+0x1b0>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d152      	bne.n	8002ff4 <ssd1306_DrawPixel+0xfc>
	{
		if (color == White)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d126      	bne.n	8002fa2 <ssd1306_DrawPixel+0xaa>
		{
			SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8002f54:	4b55      	ldr	r3, [pc, #340]	; (80030ac <ssd1306_DrawPixel+0x1b4>)
 8002f56:	681c      	ldr	r4, [r3, #0]
 8002f58:	79fd      	ldrb	r5, [r7, #7]
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	b2de      	uxtb	r6, r3
 8002f60:	46b0      	mov	r8, r6
 8002f62:	f7ff fed9 	bl	8002d18 <width>
 8002f66:	4603      	mov	r3, r0
 8002f68:	469c      	mov	ip, r3
 8002f6a:	4663      	mov	r3, ip
 8002f6c:	fb03 f308 	mul.w	r3, r3, r8
 8002f70:	442b      	add	r3, r5
 8002f72:	4423      	add	r3, r4
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b25a      	sxtb	r2, r3
 8002f78:	79bb      	ldrb	r3, [r7, #6]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	2101      	movs	r1, #1
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b258      	sxtb	r0, r3
 8002f8a:	4b48      	ldr	r3, [pc, #288]	; (80030ac <ssd1306_DrawPixel+0x1b4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	79f9      	ldrb	r1, [r7, #7]
 8002f90:	4632      	mov	r2, r6
 8002f92:	4664      	mov	r4, ip
 8002f94:	fb04 f202 	mul.w	r2, r4, r2
 8002f98:	440a      	add	r2, r1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b2c2      	uxtb	r2, r0
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e07c      	b.n	800309c <ssd1306_DrawPixel+0x1a4>
		}
		else
		{
			SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8002fa2:	4b42      	ldr	r3, [pc, #264]	; (80030ac <ssd1306_DrawPixel+0x1b4>)
 8002fa4:	681c      	ldr	r4, [r3, #0]
 8002fa6:	79fd      	ldrb	r5, [r7, #7]
 8002fa8:	79bb      	ldrb	r3, [r7, #6]
 8002faa:	08db      	lsrs	r3, r3, #3
 8002fac:	b2de      	uxtb	r6, r3
 8002fae:	46b0      	mov	r8, r6
 8002fb0:	f7ff feb2 	bl	8002d18 <width>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	469c      	mov	ip, r3
 8002fb8:	4663      	mov	r3, ip
 8002fba:	fb03 f308 	mul.w	r3, r3, r8
 8002fbe:	442b      	add	r3, r5
 8002fc0:	4423      	add	r3, r4
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b25a      	sxtb	r2, r3
 8002fc6:	79bb      	ldrb	r3, [r7, #6]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	b25b      	sxtb	r3, r3
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b258      	sxtb	r0, r3
 8002fdc:	4b33      	ldr	r3, [pc, #204]	; (80030ac <ssd1306_DrawPixel+0x1b4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	79f9      	ldrb	r1, [r7, #7]
 8002fe2:	4632      	mov	r2, r6
 8002fe4:	4664      	mov	r4, ip
 8002fe6:	fb04 f202 	mul.w	r2, r4, r2
 8002fea:	440a      	add	r2, r1
 8002fec:	4413      	add	r3, r2
 8002fee:	b2c2      	uxtb	r2, r0
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e053      	b.n	800309c <ssd1306_DrawPixel+0x1a4>
		}
	}
	else
	{
		if (color == White)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d126      	bne.n	8003048 <ssd1306_DrawPixel+0x150>
		{
			SSD1306_Buffer[y + (x / 8) * width()] |= 1 << (x % 8);
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <ssd1306_DrawPixel+0x1b4>)
 8002ffc:	681c      	ldr	r4, [r3, #0]
 8002ffe:	79bd      	ldrb	r5, [r7, #6]
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	b2de      	uxtb	r6, r3
 8003006:	46b0      	mov	r8, r6
 8003008:	f7ff fe86 	bl	8002d18 <width>
 800300c:	4603      	mov	r3, r0
 800300e:	469c      	mov	ip, r3
 8003010:	4663      	mov	r3, ip
 8003012:	fb03 f308 	mul.w	r3, r3, r8
 8003016:	442b      	add	r3, r5
 8003018:	4423      	add	r3, r4
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	b25a      	sxtb	r2, r3
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	b25b      	sxtb	r3, r3
 800302c:	4313      	orrs	r3, r2
 800302e:	b258      	sxtb	r0, r3
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <ssd1306_DrawPixel+0x1b4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	79b9      	ldrb	r1, [r7, #6]
 8003036:	4632      	mov	r2, r6
 8003038:	4664      	mov	r4, ip
 800303a:	fb04 f202 	mul.w	r2, r4, r2
 800303e:	440a      	add	r2, r1
 8003040:	4413      	add	r3, r2
 8003042:	b2c2      	uxtb	r2, r0
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e029      	b.n	800309c <ssd1306_DrawPixel+0x1a4>
		}
		else
		{
			SSD1306_Buffer[y + (x / 8) * width()] &= ~(1 << (x % 8));
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <ssd1306_DrawPixel+0x1b4>)
 800304a:	681c      	ldr	r4, [r3, #0]
 800304c:	79bd      	ldrb	r5, [r7, #6]
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	b2de      	uxtb	r6, r3
 8003054:	46b0      	mov	r8, r6
 8003056:	f7ff fe5f 	bl	8002d18 <width>
 800305a:	4603      	mov	r3, r0
 800305c:	469c      	mov	ip, r3
 800305e:	4663      	mov	r3, ip
 8003060:	fb03 f308 	mul.w	r3, r3, r8
 8003064:	442b      	add	r3, r5
 8003066:	4423      	add	r3, r4
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b25a      	sxtb	r2, r3
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	b25b      	sxtb	r3, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	b25b      	sxtb	r3, r3
 800307e:	4013      	ands	r3, r2
 8003080:	b258      	sxtb	r0, r3
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <ssd1306_DrawPixel+0x1b4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	79b9      	ldrb	r1, [r7, #6]
 8003088:	4632      	mov	r2, r6
 800308a:	4664      	mov	r4, ip
 800308c:	fb04 f202 	mul.w	r2, r4, r2
 8003090:	440a      	add	r2, r1
 8003092:	4413      	add	r3, r2
 8003094:	b2c2      	uxtb	r2, r0
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e000      	b.n	800309c <ssd1306_DrawPixel+0x1a4>
		return;
 800309a:	bf00      	nop
		}
	}
}
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a4:	200008d4 	.word	0x200008d4
 80030a8:	200008dc 	.word	0x200008dc
 80030ac:	20000010 	.word	0x20000010

080030b0 <ssd1306_DrawPixelOut>:

void ssd1306_DrawPixelOut(int8_t x, int8_t y)
{
 80030b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	460a      	mov	r2, r1
 80030bc:	71fb      	strb	r3, [r7, #7]
 80030be:	4613      	mov	r3, r2
 80030c0:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 80030c2:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <ssd1306_DrawPixelOut+0x214>)
 80030c4:	795b      	ldrb	r3, [r3, #5]
 80030c6:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80030c8:	f997 4007 	ldrsb.w	r4, [r7, #7]
 80030cc:	f7ff fe32 	bl	8002d34 <ssd1306_GetWidth>
 80030d0:	4603      	mov	r3, r0
 80030d2:	429c      	cmp	r4, r3
 80030d4:	f280 80f1 	bge.w	80032ba <ssd1306_DrawPixelOut+0x20a>
 80030d8:	f997 4006 	ldrsb.w	r4, [r7, #6]
 80030dc:	f7ff fe31 	bl	8002d42 <ssd1306_GetHeight>
 80030e0:	4603      	mov	r3, r0
 80030e2:	429c      	cmp	r4, r3
 80030e4:	f280 80e9 	bge.w	80032ba <ssd1306_DrawPixelOut+0x20a>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80030e8:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <ssd1306_DrawPixelOut+0x214>)
 80030ea:	791b      	ldrb	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d006      	beq.n	80030fe <ssd1306_DrawPixelOut+0x4e>
	{
		color = (SSD1306_COLOR) !color;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color

	if (!rotate)
 80030fe:	4b72      	ldr	r3, [pc, #456]	; (80032c8 <ssd1306_DrawPixelOut+0x218>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d16c      	bne.n	80031e0 <ssd1306_DrawPixelOut+0x130>
	{
		if (color == White)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d133      	bne.n	8003174 <ssd1306_DrawPixelOut+0xc4>
		{
			*(SSD1306_Buffer + x + (y / 8) * width()) |= 1 << (y % 8);
 800310c:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <ssd1306_DrawPixelOut+0x21c>)
 800310e:	681c      	ldr	r4, [r3, #0]
 8003110:	f997 5007 	ldrsb.w	r5, [r7, #7]
 8003114:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003118:	2b00      	cmp	r3, #0
 800311a:	da00      	bge.n	800311e <ssd1306_DrawPixelOut+0x6e>
 800311c:	3307      	adds	r3, #7
 800311e:	10db      	asrs	r3, r3, #3
 8003120:	b25e      	sxtb	r6, r3
 8003122:	46b0      	mov	r8, r6
 8003124:	f7ff fdf8 	bl	8002d18 <width>
 8003128:	4603      	mov	r3, r0
 800312a:	469c      	mov	ip, r3
 800312c:	4663      	mov	r3, ip
 800312e:	fb03 f308 	mul.w	r3, r3, r8
 8003132:	442b      	add	r3, r5
 8003134:	4423      	add	r3, r4
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b25a      	sxtb	r2, r3
 800313a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800313e:	4259      	negs	r1, r3
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	f001 0107 	and.w	r1, r1, #7
 8003148:	bf58      	it	pl
 800314a:	424b      	negpl	r3, r1
 800314c:	b25b      	sxtb	r3, r3
 800314e:	4619      	mov	r1, r3
 8003150:	2301      	movs	r3, #1
 8003152:	408b      	lsls	r3, r1
 8003154:	b25b      	sxtb	r3, r3
 8003156:	4313      	orrs	r3, r2
 8003158:	b259      	sxtb	r1, r3
 800315a:	4b5c      	ldr	r3, [pc, #368]	; (80032cc <ssd1306_DrawPixelOut+0x21c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	4630      	mov	r0, r6
 8003164:	4664      	mov	r4, ip
 8003166:	fb04 f000 	mul.w	r0, r4, r0
 800316a:	4403      	add	r3, r0
 800316c:	4413      	add	r3, r2
 800316e:	b2ca      	uxtb	r2, r1
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e0a3      	b.n	80032bc <ssd1306_DrawPixelOut+0x20c>
		}
		else
		{
			*(SSD1306_Buffer + x + (y / 8) * width()) &= ~(1 << (y % 8));
 8003174:	4b55      	ldr	r3, [pc, #340]	; (80032cc <ssd1306_DrawPixelOut+0x21c>)
 8003176:	681c      	ldr	r4, [r3, #0]
 8003178:	f997 5007 	ldrsb.w	r5, [r7, #7]
 800317c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003180:	2b00      	cmp	r3, #0
 8003182:	da00      	bge.n	8003186 <ssd1306_DrawPixelOut+0xd6>
 8003184:	3307      	adds	r3, #7
 8003186:	10db      	asrs	r3, r3, #3
 8003188:	b25e      	sxtb	r6, r3
 800318a:	46b0      	mov	r8, r6
 800318c:	f7ff fdc4 	bl	8002d18 <width>
 8003190:	4603      	mov	r3, r0
 8003192:	469c      	mov	ip, r3
 8003194:	4663      	mov	r3, ip
 8003196:	fb03 f308 	mul.w	r3, r3, r8
 800319a:	442b      	add	r3, r5
 800319c:	4423      	add	r3, r4
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b25a      	sxtb	r2, r3
 80031a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80031a6:	4259      	negs	r1, r3
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	f001 0107 	and.w	r1, r1, #7
 80031b0:	bf58      	it	pl
 80031b2:	424b      	negpl	r3, r1
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	4619      	mov	r1, r3
 80031b8:	2301      	movs	r3, #1
 80031ba:	408b      	lsls	r3, r1
 80031bc:	b25b      	sxtb	r3, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	b25b      	sxtb	r3, r3
 80031c2:	4013      	ands	r3, r2
 80031c4:	b259      	sxtb	r1, r3
 80031c6:	4b41      	ldr	r3, [pc, #260]	; (80032cc <ssd1306_DrawPixelOut+0x21c>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	4630      	mov	r0, r6
 80031d0:	4664      	mov	r4, ip
 80031d2:	fb04 f000 	mul.w	r0, r4, r0
 80031d6:	4403      	add	r3, r0
 80031d8:	4413      	add	r3, r2
 80031da:	b2ca      	uxtb	r2, r1
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e06d      	b.n	80032bc <ssd1306_DrawPixelOut+0x20c>
		}
	}
	else
	{
		if (color == White)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d133      	bne.n	800324e <ssd1306_DrawPixelOut+0x19e>
		{
			SSD1306_Buffer[y + (x / 8) * width()] |= 1 << (x % 8);
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <ssd1306_DrawPixelOut+0x21c>)
 80031e8:	681c      	ldr	r4, [r3, #0]
 80031ea:	f997 5006 	ldrsb.w	r5, [r7, #6]
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	da00      	bge.n	80031f8 <ssd1306_DrawPixelOut+0x148>
 80031f6:	3307      	adds	r3, #7
 80031f8:	10db      	asrs	r3, r3, #3
 80031fa:	b25e      	sxtb	r6, r3
 80031fc:	46b0      	mov	r8, r6
 80031fe:	f7ff fd8b 	bl	8002d18 <width>
 8003202:	4603      	mov	r3, r0
 8003204:	469c      	mov	ip, r3
 8003206:	4663      	mov	r3, ip
 8003208:	fb03 f308 	mul.w	r3, r3, r8
 800320c:	442b      	add	r3, r5
 800320e:	4423      	add	r3, r4
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b25a      	sxtb	r2, r3
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	4259      	negs	r1, r3
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	f001 0107 	and.w	r1, r1, #7
 8003222:	bf58      	it	pl
 8003224:	424b      	negpl	r3, r1
 8003226:	b25b      	sxtb	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	2301      	movs	r3, #1
 800322c:	408b      	lsls	r3, r1
 800322e:	b25b      	sxtb	r3, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	b258      	sxtb	r0, r3
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <ssd1306_DrawPixelOut+0x21c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800323c:	4632      	mov	r2, r6
 800323e:	4664      	mov	r4, ip
 8003240:	fb04 f202 	mul.w	r2, r4, r2
 8003244:	440a      	add	r2, r1
 8003246:	4413      	add	r3, r2
 8003248:	b2c2      	uxtb	r2, r0
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e036      	b.n	80032bc <ssd1306_DrawPixelOut+0x20c>
		}
		else
		{
			SSD1306_Buffer[y + (x / 8) * width()] &= ~(1 << (x % 8));
 800324e:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <ssd1306_DrawPixelOut+0x21c>)
 8003250:	681c      	ldr	r4, [r3, #0]
 8003252:	f997 5006 	ldrsb.w	r5, [r7, #6]
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	da00      	bge.n	8003260 <ssd1306_DrawPixelOut+0x1b0>
 800325e:	3307      	adds	r3, #7
 8003260:	10db      	asrs	r3, r3, #3
 8003262:	b25e      	sxtb	r6, r3
 8003264:	46b0      	mov	r8, r6
 8003266:	f7ff fd57 	bl	8002d18 <width>
 800326a:	4603      	mov	r3, r0
 800326c:	469c      	mov	ip, r3
 800326e:	4663      	mov	r3, ip
 8003270:	fb03 f308 	mul.w	r3, r3, r8
 8003274:	442b      	add	r3, r5
 8003276:	4423      	add	r3, r4
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b25a      	sxtb	r2, r3
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	4259      	negs	r1, r3
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	f001 0107 	and.w	r1, r1, #7
 800328a:	bf58      	it	pl
 800328c:	424b      	negpl	r3, r1
 800328e:	b25b      	sxtb	r3, r3
 8003290:	4619      	mov	r1, r3
 8003292:	2301      	movs	r3, #1
 8003294:	408b      	lsls	r3, r1
 8003296:	b25b      	sxtb	r3, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	b25b      	sxtb	r3, r3
 800329c:	4013      	ands	r3, r2
 800329e:	b258      	sxtb	r0, r3
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <ssd1306_DrawPixelOut+0x21c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80032a8:	4632      	mov	r2, r6
 80032aa:	4664      	mov	r4, ip
 80032ac:	fb04 f202 	mul.w	r2, r4, r2
 80032b0:	440a      	add	r2, r1
 80032b2:	4413      	add	r3, r2
 80032b4:	b2c2      	uxtb	r2, r0
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e000      	b.n	80032bc <ssd1306_DrawPixelOut+0x20c>
		return;
 80032ba:	bf00      	nop
		}
	}
}
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c4:	200008d4 	.word	0x200008d4
 80032c8:	200008dc 	.word	0x200008dc
 80032cc:	20000010 	.word	0x20000010

080032d0 <ssd1306_DrawBitmap>:
//   pBMP - pointer to array containing bitmap
// note: each '1' bit in the bitmap will be drawn as a pixel
//       each '0' bit in the will not be drawn (transparent bitmap)
// bitmap: one byte per 8 vertical pixels, LSB top, truncate bottom bits
void ssd1306_DrawBitmap(int8_t X, uint8_t Y, uint8_t W, uint8_t H, const uint8_t* pBMP)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4604      	mov	r4, r0
 80032d8:	4608      	mov	r0, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	461a      	mov	r2, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	71fb      	strb	r3, [r7, #7]
 80032e2:	4603      	mov	r3, r0
 80032e4:	71bb      	strb	r3, [r7, #6]
 80032e6:	460b      	mov	r3, r1
 80032e8:	717b      	strb	r3, [r7, #5]
 80032ea:	4613      	mov	r3, r2
 80032ec:	713b      	strb	r3, [r7, #4]
	uint8_t pY;
	uint8_t tmpCh;
	uint8_t bL;


	pY = Y;
 80032ee:	79bb      	ldrb	r3, [r7, #6]
 80032f0:	73bb      	strb	r3, [r7, #14]
	while (pY < Y + H)
 80032f2:	e03b      	b.n	800336c <ssd1306_DrawBitmap+0x9c>
	{
		pX = X;
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	73fb      	strb	r3, [r7, #15]
		while (pX < X + W)
 80032f8:	e02e      	b.n	8003358 <ssd1306_DrawBitmap+0x88>
		{
			bL = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	733b      	strb	r3, [r7, #12]
			tmpCh = *pBMP++;
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	623a      	str	r2, [r7, #32]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	737b      	strb	r3, [r7, #13]
			if (tmpCh)
 8003308:	7b7b      	ldrb	r3, [r7, #13]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d021      	beq.n	8003352 <ssd1306_DrawBitmap+0x82>
			{
				while (bL < 8)
 800330e:	e01c      	b.n	800334a <ssd1306_DrawBitmap+0x7a>
				{
					if (tmpCh & 0x01) ssd1306_DrawPixelOut(pX,pY + bL);
 8003310:	7b7b      	ldrb	r3, [r7, #13]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <ssd1306_DrawBitmap+0x5e>
 800331a:	f997 000f 	ldrsb.w	r0, [r7, #15]
 800331e:	7bba      	ldrb	r2, [r7, #14]
 8003320:	7b3b      	ldrb	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	b25b      	sxtb	r3, r3
 8003328:	4619      	mov	r1, r3
 800332a:	f7ff fec1 	bl	80030b0 <ssd1306_DrawPixelOut>
					tmpCh >>= 1;
 800332e:	7b7b      	ldrb	r3, [r7, #13]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	737b      	strb	r3, [r7, #13]
					if (tmpCh)
 8003334:	7b7b      	ldrb	r3, [r7, #13]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <ssd1306_DrawBitmap+0x72>
					{
						bL++;
 800333a:	7b3b      	ldrb	r3, [r7, #12]
 800333c:	3301      	adds	r3, #1
 800333e:	733b      	strb	r3, [r7, #12]
 8003340:	e003      	b.n	800334a <ssd1306_DrawBitmap+0x7a>
					}
					else
					{
						pX++;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	3301      	adds	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
						break;
 8003348:	e006      	b.n	8003358 <ssd1306_DrawBitmap+0x88>
				while (bL < 8)
 800334a:	7b3b      	ldrb	r3, [r7, #12]
 800334c:	2b07      	cmp	r3, #7
 800334e:	d9df      	bls.n	8003310 <ssd1306_DrawBitmap+0x40>
 8003350:	e002      	b.n	8003358 <ssd1306_DrawBitmap+0x88>
					}
				}
			}
			else
			{
				pX++;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	3301      	adds	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
		while (pX < X + W)
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800335e:	797b      	ldrb	r3, [r7, #5]
 8003360:	440b      	add	r3, r1
 8003362:	429a      	cmp	r2, r3
 8003364:	dbc9      	blt.n	80032fa <ssd1306_DrawBitmap+0x2a>
			}
		}
		pY += 8;
 8003366:	7bbb      	ldrb	r3, [r7, #14]
 8003368:	3308      	adds	r3, #8
 800336a:	73bb      	strb	r3, [r7, #14]
	while (pY < Y + H)
 800336c:	7bba      	ldrb	r2, [r7, #14]
 800336e:	79b9      	ldrb	r1, [r7, #6]
 8003370:	793b      	ldrb	r3, [r7, #4]
 8003372:	440b      	add	r3, r1
 8003374:	429a      	cmp	r2, r3
 8003376:	dbbd      	blt.n	80032f4 <ssd1306_DrawBitmap+0x24>
	}
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}

08003380 <ssd1306_WriteChar>:

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	e883 0006 	stmia.w	r3, {r1, r2}
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003390:	f7ff fcc2 	bl	8002d18 <width>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <ssd1306_WriteChar+0x120>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	793b      	ldrb	r3, [r7, #4]
 80033a0:	440b      	add	r3, r1
 80033a2:	429a      	cmp	r2, r3
 80033a4:	dd0a      	ble.n	80033bc <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 80033a6:	f7ff fcbe 	bl	8002d26 <height>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <ssd1306_WriteChar+0x120>)
 80033b0:	885b      	ldrh	r3, [r3, #2]
 80033b2:	4619      	mov	r1, r3
 80033b4:	797b      	ldrb	r3, [r7, #5]
 80033b6:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	dc01      	bgt.n	80033c0 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	e06a      	b.n	8003496 <ssd1306_WriteChar+0x116>
	}

	// Use the font to write
	if (1)
	{
	for (i = 0; i < Font.FontHeight; i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e059      	b.n	800347a <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	3b20      	subs	r3, #32
 80033cc:	7979      	ldrb	r1, [r7, #5]
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4619      	mov	r1, r3
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	440b      	add	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	61bb      	str	r3, [r7, #24]
		for (j = 0; j < Font.FontWidth; j++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	e041      	b.n	800346a <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d011      	beq.n	800341a <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 80033f6:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <ssd1306_WriteChar+0x120>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	4413      	add	r3, r2
 8003402:	b2d8      	uxtb	r0, r3
 8003404:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <ssd1306_WriteChar+0x120>)
 8003406:	885b      	ldrh	r3, [r3, #2]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4413      	add	r3, r2
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	f7ff fd70 	bl	8002ef8 <ssd1306_DrawPixel>
 8003418:	e024      	b.n	8003464 <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <ssd1306_WriteChar+0x120>)
 800341c:	795b      	ldrb	r3, [r3, #5]
 800341e:	2b00      	cmp	r3, #0
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <ssd1306_WriteChar+0x120>)
 800342c:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <ssd1306_WriteChar+0x120>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4413      	add	r3, r2
 800343a:	b2d8      	uxtb	r0, r3
 800343c:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <ssd1306_WriteChar+0x120>)
 800343e:	885b      	ldrh	r3, [r3, #2]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4413      	add	r3, r2
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	f7ff fd54 	bl	8002ef8 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <ssd1306_WriteChar+0x120>)
 8003452:	795b      	ldrb	r3, [r3, #5]
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <ssd1306_WriteChar+0x120>)
 8003462:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3301      	adds	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	793b      	ldrb	r3, [r7, #4]
 800346c:	461a      	mov	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4293      	cmp	r3, r2
 8003472:	d3b8      	bcc.n	80033e6 <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3301      	adds	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	797b      	ldrb	r3, [r7, #5]
 800347c:	461a      	mov	r2, r3
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4293      	cmp	r3, r2
 8003482:	d3a0      	bcc.n	80033c6 <ssd1306_WriteChar+0x46>
				}
			}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <ssd1306_WriteChar+0x120>)
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	793b      	ldrb	r3, [r7, #4]
 800348a:	b29b      	uxth	r3, r3
 800348c:	4413      	add	r3, r2
 800348e:	b29a      	uxth	r2, r3
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <ssd1306_WriteChar+0x120>)
 8003492:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200008d4 	.word	0x200008d4

080034a4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 80034b2:	e012      	b.n	80034da <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	7818      	ldrb	r0, [r3, #0]
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034be:	f7ff ff5f 	bl	8003380 <ssd1306_WriteChar>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461a      	mov	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d002      	beq.n	80034d4 <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	e008      	b.n	80034e6 <ssd1306_WriteString+0x42>
		}

		// Next char
		str++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
	while (*str)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e8      	bne.n	80034b4 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	781b      	ldrb	r3, [r3, #0]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <ssd1306_TestForPixels>:
//
//	Position the cursor
//

uint16_t ssd1306_TestForPixels(uint8_t X, uint8_t Y, uint8_t W, uint8_t H, const uint8_t* pBMP)
{
 80034f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4604      	mov	r4, r0
 80034fa:	4608      	mov	r0, r1
 80034fc:	4611      	mov	r1, r2
 80034fe:	461a      	mov	r2, r3
 8003500:	4623      	mov	r3, r4
 8003502:	71fb      	strb	r3, [r7, #7]
 8003504:	4603      	mov	r3, r0
 8003506:	71bb      	strb	r3, [r7, #6]
 8003508:	460b      	mov	r3, r1
 800350a:	717b      	strb	r3, [r7, #5]
 800350c:	4613      	mov	r3, r2
 800350e:	713b      	strb	r3, [r7, #4]
	uint8_t pX;
	uint8_t pY;

	uint8_t hit = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	737b      	strb	r3, [r7, #13]

	pY = Y;
 8003514:	79bb      	ldrb	r3, [r7, #6]
 8003516:	73bb      	strb	r3, [r7, #14]
	while (pY < Y + H)
 8003518:	e029      	b.n	800356e <ssd1306_TestForPixels+0x7e>
	{
		pX = X;
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	73fb      	strb	r3, [r7, #15]
		while (pX < X + W)
 800351e:	e01d      	b.n	800355c <ssd1306_TestForPixels+0x6c>
		{
			if (*pBMP & SSD1306_Buffer[pX + (pY/8) * ssd1306_GetWidth()])
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	781c      	ldrb	r4, [r3, #0]
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <ssd1306_TestForPixels+0x98>)
 8003526:	681d      	ldr	r5, [r3, #0]
 8003528:	7bfe      	ldrb	r6, [r7, #15]
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	08db      	lsrs	r3, r3, #3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4698      	mov	r8, r3
 8003532:	f7ff fbff 	bl	8002d34 <ssd1306_GetWidth>
 8003536:	4603      	mov	r3, r0
 8003538:	fb03 f308 	mul.w	r3, r3, r8
 800353c:	4433      	add	r3, r6
 800353e:	442b      	add	r3, r5
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	4023      	ands	r3, r4
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <ssd1306_TestForPixels+0x60>
				hit++;
 800354a:	7b7b      	ldrb	r3, [r7, #13]
 800354c:	3301      	adds	r3, #1
 800354e:	737b      	strb	r3, [r7, #13]
			pBMP++;
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	3301      	adds	r3, #1
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
			pX++;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	3301      	adds	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
		while (pX < X + W)
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	79f9      	ldrb	r1, [r7, #7]
 8003560:	797b      	ldrb	r3, [r7, #5]
 8003562:	440b      	add	r3, r1
 8003564:	429a      	cmp	r2, r3
 8003566:	dbdb      	blt.n	8003520 <ssd1306_TestForPixels+0x30>
		}
		pY += 8;
 8003568:	7bbb      	ldrb	r3, [r7, #14]
 800356a:	3308      	adds	r3, #8
 800356c:	73bb      	strb	r3, [r7, #14]
	while (pY < Y + H)
 800356e:	7bba      	ldrb	r2, [r7, #14]
 8003570:	79b9      	ldrb	r1, [r7, #6]
 8003572:	793b      	ldrb	r3, [r7, #4]
 8003574:	440b      	add	r3, r1
 8003576:	429a      	cmp	r2, r3
 8003578:	dbcf      	blt.n	800351a <ssd1306_TestForPixels+0x2a>
	}
	return hit;
 800357a:	7b7b      	ldrb	r3, [r7, #13]
 800357c:	b29b      	uxth	r3, r3
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003588:	20000010 	.word	0x20000010

0800358c <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	460a      	mov	r2, r1
 8003596:	71fb      	strb	r3, [r7, #7]
 8003598:	4613      	mov	r3, r2
 800359a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <ssd1306_SetCursor+0x2c>)
 80035a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80035a4:	79bb      	ldrb	r3, [r7, #6]
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <ssd1306_SetCursor+0x2c>)
 80035aa:	805a      	strh	r2, [r3, #2]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	200008d4 	.word	0x200008d4

080035bc <ssd1306_Clear>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}

void ssd1306_Clear()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer-50, 0, SSD1306_BUFFER_SIZE+50);
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <ssd1306_Clear+0x1c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3b32      	subs	r3, #50	; 0x32
 80035c6:	f240 4232 	movw	r2, #1074	; 0x432
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 f9b1 	bl	8003934 <memset>
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000010 	.word	0x20000010

080035dc <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80035e6:	230a      	movs	r3, #10
 80035e8:	9302      	str	r3, [sp, #8]
 80035ea:	2301      	movs	r3, #1
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	1dfb      	adds	r3, r7, #7
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2301      	movs	r3, #1
 80035f4:	2200      	movs	r2, #0
 80035f6:	2178      	movs	r1, #120	; 0x78
 80035f8:	4803      	ldr	r0, [pc, #12]	; (8003608 <ssd1306_WriteCommand+0x2c>)
 80035fa:	f7fd f9fd 	bl	80009f8 <HAL_I2C_Mem_Write>
#endif
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000988 	.word	0x20000988

0800360c <ssd1306_WriteData>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af04      	add	r7, sp, #16
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8003618:	2364      	movs	r3, #100	; 0x64
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	887b      	ldrh	r3, [r7, #2]
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	2178      	movs	r1, #120	; 0x78
 800362a:	4803      	ldr	r0, [pc, #12]	; (8003638 <ssd1306_WriteData+0x2c>)
 800362c:	f7fd f9e4 	bl	80009f8 <HAL_I2C_Mem_Write>
#endif
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000988 	.word	0x20000988

0800363c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_MspInit+0x5c>)
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	4a14      	ldr	r2, [pc, #80]	; (8003698 <HAL_MspInit+0x5c>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6193      	str	r3, [r2, #24]
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_MspInit+0x5c>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <HAL_MspInit+0x5c>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <HAL_MspInit+0x5c>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	61d3      	str	r3, [r2, #28]
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <HAL_MspInit+0x5c>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_MspInit+0x60>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <HAL_MspInit+0x60>)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	40021000 	.word	0x40021000
 800369c:	40010000 	.word	0x40010000

080036a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	f107 0310 	add.w	r3, r7, #16
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_I2C_MspInit+0x74>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d124      	bne.n	800370a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_I2C_MspInit+0x78>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	4a14      	ldr	r2, [pc, #80]	; (8003718 <HAL_I2C_MspInit+0x78>)
 80036c6:	f043 0308 	orr.w	r3, r3, #8
 80036ca:	6193      	str	r3, [r2, #24]
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_I2C_MspInit+0x78>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036de:	2312      	movs	r3, #18
 80036e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036e2:	2303      	movs	r3, #3
 80036e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e6:	f107 0310 	add.w	r3, r7, #16
 80036ea:	4619      	mov	r1, r3
 80036ec:	480b      	ldr	r0, [pc, #44]	; (800371c <HAL_I2C_MspInit+0x7c>)
 80036ee:	f7fc fec7 	bl	8000480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_I2C_MspInit+0x78>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_I2C_MspInit+0x78>)
 80036f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036fc:	61d3      	str	r3, [r2, #28]
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_I2C_MspInit+0x78>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800370a:	bf00      	nop
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40005800 	.word	0x40005800
 8003718:	40021000 	.word	0x40021000
 800371c:	40010c00 	.word	0x40010c00

08003720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <HAL_TIM_Base_MspInit+0x44>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d113      	bne.n	800375a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <HAL_TIM_Base_MspInit+0x48>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	4a0c      	ldr	r2, [pc, #48]	; (8003768 <HAL_TIM_Base_MspInit+0x48>)
 8003738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800373c:	6193      	str	r3, [r2, #24]
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_TIM_Base_MspInit+0x48>)
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2100      	movs	r1, #0
 800374e:	2019      	movs	r0, #25
 8003750:	f7fc fe5f 	bl	8000412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003754:	2019      	movs	r0, #25
 8003756:	f7fc fe78 	bl	800044a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40021000 	.word	0x40021000

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800377c:	e7fe      	b.n	800377c <HardFault_Handler+0x4>

0800377e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003782:	e7fe      	b.n	8003782 <MemManage_Handler+0x4>

08003784 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <BusFault_Handler+0x4>

0800378a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800378e:	e7fe      	b.n	800378e <UsageFault_Handler+0x4>

08003790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b8:	f7fc fd16 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  static uint16_t ticks= 0;
  ticks++;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <SysTick_Handler+0x34>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <SysTick_Handler+0x34>)
 80037c6:	801a      	strh	r2, [r3, #0]
  if (ticks == 100)
 80037c8:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <SysTick_Handler+0x34>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d108      	bne.n	80037e2 <SysTick_Handler+0x2e>
  {
	  points++;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <SysTick_Handler+0x38>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <SysTick_Handler+0x38>)
 80037da:	801a      	strh	r2, [r3, #0]
	  ticks = 0;
 80037dc:	4b02      	ldr	r3, [pc, #8]	; (80037e8 <SysTick_Handler+0x34>)
 80037de:	2200      	movs	r2, #0
 80037e0:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200008de 	.word	0x200008de
 80037ec:	200000b8 	.word	0x200000b8

080037f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	switch (getState())
 80037f4:	f7ff f8a8 	bl	8002948 <getState>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d002      	beq.n	8003804 <EXTI0_IRQHandler+0x14>
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d003      	beq.n	800380a <EXTI0_IRQHandler+0x1a>
 8003802:	e004      	b.n	800380e <EXTI0_IRQHandler+0x1e>
	{
	case 1:
		SetJumpState();
 8003804:	f7ff f894 	bl	8002930 <SetJumpState>
		break;
 8003808:	e001      	b.n	800380e <EXTI0_IRQHandler+0x1e>
	case 2:
		startGame();
 800380a:	f7ff f8b5 	bl	8002978 <startGame>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800380e:	2001      	movs	r0, #1
 8003810:	f7fc ffa8 	bl	8000764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
  //uint8_t check = 0;

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}

08003818 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  //drawRoad();

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800381c:	4805      	ldr	r0, [pc, #20]	; (8003834 <TIM1_UP_IRQHandler+0x1c>)
 800381e:	f7fe f96d 	bl	8001afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  if (getState() != 2)
 8003822:	f7ff f891 	bl	8002948 <getState>
 8003826:	4603      	mov	r3, r0
 8003828:	2b02      	cmp	r3, #2
 800382a:	d001      	beq.n	8003830 <TIM1_UP_IRQHandler+0x18>
  {
	  draw();
 800382c:	f7fe fffe 	bl	800282c <draw>
  }
  //tt++;

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	200009dc 	.word	0x200009dc

08003838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <SystemInit+0x5c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <SystemInit+0x5c>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <SystemInit+0x5c>)
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4911      	ldr	r1, [pc, #68]	; (8003894 <SystemInit+0x5c>)
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <SystemInit+0x60>)
 8003850:	4013      	ands	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <SystemInit+0x5c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <SystemInit+0x5c>)
 800385a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <SystemInit+0x5c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <SystemInit+0x5c>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <SystemInit+0x5c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a07      	ldr	r2, [pc, #28]	; (8003894 <SystemInit+0x5c>)
 8003876:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800387a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <SystemInit+0x5c>)
 800387e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003882:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <SystemInit+0x64>)
 8003886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800388a:	609a      	str	r2, [r3, #8]
#endif 
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	40021000 	.word	0x40021000
 8003898:	f8ff0000 	.word	0xf8ff0000
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80038a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80038a2:	e003      	b.n	80038ac <LoopCopyDataInit>

080038a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80038a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80038a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80038aa:	3104      	adds	r1, #4

080038ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80038ac:	480a      	ldr	r0, [pc, #40]	; (80038d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80038b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80038b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80038b4:	d3f6      	bcc.n	80038a4 <CopyDataInit>
  ldr r2, =_sbss
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038b8:	e002      	b.n	80038c0 <LoopFillZerobss>

080038ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038bc:	f842 3b04 	str.w	r3, [r2], #4

080038c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038c4:	d3f9      	bcc.n	80038ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038c6:	f7ff ffb7 	bl	8003838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ca:	f000 f80f 	bl	80038ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ce:	f7ff f8c1 	bl	8002a54 <main>
  bx lr
 80038d2:	4770      	bx	lr
  ldr r3, =_sidata
 80038d4:	0800448c 	.word	0x0800448c
  ldr r0, =_sdata
 80038d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038dc:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 80038e0:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 80038e4:	20000a1c 	.word	0x20000a1c

080038e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038e8:	e7fe      	b.n	80038e8 <ADC1_2_IRQHandler>
	...

080038ec <__libc_init_array>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	2500      	movs	r5, #0
 80038f0:	4e0c      	ldr	r6, [pc, #48]	; (8003924 <__libc_init_array+0x38>)
 80038f2:	4c0d      	ldr	r4, [pc, #52]	; (8003928 <__libc_init_array+0x3c>)
 80038f4:	1ba4      	subs	r4, r4, r6
 80038f6:	10a4      	asrs	r4, r4, #2
 80038f8:	42a5      	cmp	r5, r4
 80038fa:	d109      	bne.n	8003910 <__libc_init_array+0x24>
 80038fc:	f000 f822 	bl	8003944 <_init>
 8003900:	2500      	movs	r5, #0
 8003902:	4e0a      	ldr	r6, [pc, #40]	; (800392c <__libc_init_array+0x40>)
 8003904:	4c0a      	ldr	r4, [pc, #40]	; (8003930 <__libc_init_array+0x44>)
 8003906:	1ba4      	subs	r4, r4, r6
 8003908:	10a4      	asrs	r4, r4, #2
 800390a:	42a5      	cmp	r5, r4
 800390c:	d105      	bne.n	800391a <__libc_init_array+0x2e>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003914:	4798      	blx	r3
 8003916:	3501      	adds	r5, #1
 8003918:	e7ee      	b.n	80038f8 <__libc_init_array+0xc>
 800391a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800391e:	4798      	blx	r3
 8003920:	3501      	adds	r5, #1
 8003922:	e7f2      	b.n	800390a <__libc_init_array+0x1e>
 8003924:	08004484 	.word	0x08004484
 8003928:	08004484 	.word	0x08004484
 800392c:	08004484 	.word	0x08004484
 8003930:	08004488 	.word	0x08004488

08003934 <memset>:
 8003934:	4603      	mov	r3, r0
 8003936:	4402      	add	r2, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
